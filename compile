#!/usr/bin/env bash

#Retrieves absolute path of current script, while maintaining symlinks, even when "./" would translate with "readlink -f" into something disregarding symlinked components in $PWD.
#However, will dereference symlinks IF the script location itself is a symlink. This is to allow symlinking to scripts to function normally.
#Suitable for allowing scripts to find other scripts they depend on. May look like an ugly hack, but it has proven reliable over the years.
_getScriptAbsoluteLocation() {
	local absoluteLocation
	if [[ (-e $PWD\/$0) && ($0 != "") ]] && [[ "$1" != "/"* ]]
			then
	absoluteLocation="$PWD"\/"$0"
	absoluteLocation=$(realpath -L -s "$absoluteLocation")
			else
	absoluteLocation=$(realpath -L "$0")
	fi

	if [[ -h "$absoluteLocation" ]]
			then
	absoluteLocation=$(readlink -f "$absoluteLocation")
	absoluteLocation=$(realpath -L "$absoluteLocation")
	fi
	echo $absoluteLocation
}
alias getScriptAbsoluteLocation=_getScriptAbsoluteLocation

#Retrieves absolute path of current script, while maintaining symlinks, even when "./" would translate with "readlink -f" into something disregarding symlinked components in $PWD.
#Suitable for allowing scripts to find other scripts they depend on.
_getScriptAbsoluteFolder() {
	dirname "$(_getScriptAbsoluteLocation)"
}
alias getScriptAbsoluteFolder=_getScriptAbsoluteFolder

#Retrieves absolute path of parameter, while maintaining symlinks, even when "./" would translate with "readlink -f" into something disregarding symlinked components in $PWD.
#Suitable for finding absolute paths, when it is desirable not to interfere with symlink specified folder structure.
_getAbsoluteLocation() {
	if [[ "$1" == "" ]]
	then
		echo
		return
	fi
	
	local absoluteLocation
	if [[ (-e $PWD\/$1) && ($1 != "") ]] && [[ "$1" != "/"* ]]
			then
	absoluteLocation="$PWD"\/"$1"
	absoluteLocation=$(realpath -L -s "$absoluteLocation")
			else
	absoluteLocation=$(realpath -L "$1")
	fi
	echo $absoluteLocation
}
alias getAbsoluteLocation=_getAbsoluteLocation

#Retrieves absolute path of parameter, while maintaining symlinks, even when "./" would translate with "readlink -f" into something disregarding symlinked components in $PWD.
#Suitable for finding absolute paths, when it is desirable not to interfere with symlink specified folder structure.
_getAbsoluteFolder() {
	local absoluteLocation=$(_getAbsoluteLocation "$1")
	dirname "$absoluteLocation"
}
alias getAbsoluteLocation=_getAbsoluteLocation

cd "$_getScriptAbsoluteFolder"

ubiquitiousLibDir="./"

cat "$ubiquitiousLibDir"/generic/minimalheader.sh > ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

echo '#Ubiquitous Bash v2.0' >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

echo '#http://creativecommons.org/publicdomain/zero/1.0/' >> ./ubiquitous_bash.sh
echo '#To the extent possible under law, mirage335 has waived all copyright and related or neighboring rights to ubiquitous_bash.sh. This work is published from: United States.' >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

echo "#####Utilities" >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/generic/showCommand.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/generic/filesystem/absolutepaths.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/generic/filesystem/finddir.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/generic/filesystem/safedelete.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/generic/filesystem/discoverresource.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/generic/process/timeout.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/generic/process/waitforprocess.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/generic/process/daemon.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/generic/net/findport.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/generic/uid.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/generic/validaterequest.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/generic/preserveLog.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/virtualization/localPathTranslation.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/special/mustberoot.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/special/uuid.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

echo "#####Basic Variable Management" >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/structure/globalvars.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/structure/localfs.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/structure/localenv.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/generic/process/idle.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/structure/installation.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/structure/program.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/structure/overrides.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh

cat "$ubiquitiousLibDir"/structure/entry.sh >> ./ubiquitous_bash.sh
echo >> ./ubiquitous_bash.sh



























