#!/usr/bin/env bash

#Retrieves absolute path of current script, while maintaining symlinks, even when "./" would translate with "readlink -f" into something disregarding symlinked components in $PWD.
#However, will dereference symlinks IF the script location itself is a symlink. This is to allow symlinking to scripts to function normally.
#Suitable for allowing scripts to find other scripts they depend on. May look like an ugly hack, but it has proven reliable over the years.
_getScriptAbsoluteLocation() {
	local absoluteLocation
	if [[ (-e $PWD\/$0) && ($0 != "") ]] && [[ "$1" != "/"* ]]
			then
	absoluteLocation="$PWD"\/"$0"
	absoluteLocation=$(realpath -L -s "$absoluteLocation")
			else
	absoluteLocation=$(realpath -L "$0")
	fi

	if [[ -h "$absoluteLocation" ]]
			then
	absoluteLocation=$(readlink -f "$absoluteLocation")
	absoluteLocation=$(realpath -L "$absoluteLocation")
	fi
	echo $absoluteLocation
}
alias getScriptAbsoluteLocation=_getScriptAbsoluteLocation

#Retrieves absolute path of current script, while maintaining symlinks, even when "./" would translate with "readlink -f" into something disregarding symlinked components in $PWD.
#Suitable for allowing scripts to find other scripts they depend on.
_getScriptAbsoluteFolder() {
	dirname "$(_getScriptAbsoluteLocation)"
}
alias getScriptAbsoluteFolder=_getScriptAbsoluteFolder

#Retrieves absolute path of parameter, while maintaining symlinks, even when "./" would translate with "readlink -f" into something disregarding symlinked components in $PWD.
#Suitable for finding absolute paths, when it is desirable not to interfere with symlink specified folder structure.
_getAbsoluteLocation() {
	if [[ "$1" == "" ]]
	then
		echo
		return
	fi
	
	local absoluteLocation
	if [[ (-e $PWD\/$1) && ($1 != "") ]] && [[ "$1" != "/"* ]]
			then
	absoluteLocation="$PWD"\/"$1"
	absoluteLocation=$(realpath -L -s "$absoluteLocation")
			else
	absoluteLocation=$(realpath -L "$1")
	fi
	echo $absoluteLocation
}
alias getAbsoluteLocation=_getAbsoluteLocation

#Retrieves absolute path of parameter, while maintaining symlinks, even when "./" would translate with "readlink -f" into something disregarding symlinked components in $PWD.
#Suitable for finding absolute paths, when it is desirable not to interfere with symlink specified folder structure.
_getAbsoluteFolder() {
	local absoluteLocation=$(_getAbsoluteLocation "$1")
	dirname "$absoluteLocation"
}
alias getAbsoluteLocation=_getAbsoluteLocation

cd "$(_getScriptAbsoluteFolder)"

export ubiquitiousLibDir="."
[[ -e "./_lib/ubiquitous_bash" ]] && export ubiquitiousLibDir="./_lib/ubiquitous_bash"
export progDir="./_prog"
export progScript="./ubiquitous_bash.sh"

#"$1" == file path
_includeFile() {
	
	if [[ -e  "$1" ]]
	then
		cat "$1" >> "$progScript"
		echo >> "$progScript"
		return 0
	fi
	
	return 1
}

#"$1" == filename
#"$2" == subdirectory
_includeScript() {
	
	_includeFile "$progDir"/"$2"/"$1" && return 0
	
	_includeFile "$progDir"/"$1" && return 0
	
	_includeFile "$ubiquitiousLibDir"/"$2"/"$1" && return 0
	
	_includeFile "$ubiquitiousLibDir"/"$1" && return 0
	
}

rm "$progScript" >/dev/null 2>&1

_includeScript minimalheader.sh "generic"

echo "#####Utilities" >> "$progScript"
echo >> "$progScript"

_includeScript showCommand.sh "generic"

_includeScript absolutepaths.sh "generic/filesystem"

_includeScript finddir.sh "generic/filesystem"

_includeScript safedelete.sh "generic/filesystem"

_includeScript discoverresource.sh "generic/filesystem"

_includeScript bindmountmanager.sh "generic/filesystem/mounts"

_includeScript waitumount.sh "generic/filesystem/mounts"

_includeScript mountchecks.sh "generic/filesystem/mounts"

_includeScript timeout.sh "generic/process"

_includeScript waitforprocess.sh "generic/process"

_includeScript daemon.sh "generic/process"

_includeScript remotesig.sh "generic/process"

_includeScript fetch.sh "generic/net"

_includeScript findport.sh "generic/net"

_includeScript uid.sh "generic"

_includeScript validaterequest.sh "generic"

_includeScript preserveLog.sh "generic"

_includeScript here_systemd.sh "os/unix/systemd"
_includeScript hook_systemd.sh "os/unix/systemd"

_includeScript virtenv.sh "virtualization"

_includeScript osTranslation.sh "virtualization"
_includeScript localPathTranslation.sh "virtualization"

_includeScript createImage.sh "virtualization/image"
_includeScript here_bootdisc.sh "virtualization/image"
_includeScript bootdisc.sh "virtualization/image"

_includeScript procchroot.sh "virtualization/chroot"
_includeScript mountchroot.sh "virtualization/chroot"
_includeScript enterchroot.sh "virtualization/chroot"

_includeScript mountchrootuser.sh "virtualization/chroot"
_includeScript userchroot.sh "virtualization/chroot"
_includeScript dropchroot.sh "virtualization/chroot"

_includeScript qemu-raspi-raspi.sh "virtualization/qemu"
_includeScript qemu-x64-raspi.sh "virtualization/qemu"
_includeScript qemu-x64-x64.sh "virtualization/qemu"
_includeScript qemu.sh "virtualization/qemu"

_includeScript vboxtest.sh "virtualization/vbox"
_includeScript vboxlab.sh "virtualization/vbox"
_includeScript vboxuser.sh "virtualization/vbox"

_includeScript mustberoot.sh "special"
_includeScript mustgetsudo.sh "special"

_includeScript gosu.sh "special/gosu"

_includeScript uuid.sh "special"

echo "#####Shortcuts" >> "$progScript"
echo >> "$progScript"

_includeScript git.sh "shortcuts/git"
_includeScript gitBare.sh "shortcuts/git"

_includeScript distro.sh "shortcuts/distro"

_includeScript createDebian.sh "shortcuts/distro/debian"
_includeScript createRaspbian.sh "shortcuts/distro/raspbian"

_includeScript visualPrompt.sh "shortcuts/prompt"

_includeScript testx11.sh "shortcuts/x11"
_includeScript x11ClipboardImage.sh "shortcuts/x11/clipboard"

_includeScript setupUbiquitous.sh "shortcuts"

echo "#####Basic Variable Management" >> "$progScript"
echo >> "$progScript"

_includeScript globalvars.sh "structure"

_includeScript specglobalvars.sh "structure"

_includeScript vboxvars.sh "virtualization/vbox"

#_includeScript gitVars.sh "shortcuts/git"

_includeScript localfs.sh "structure"

_includeScript localenv.sh "structure"

_includeScript idle.sh "generic/process"

_includeScript installation.sh "structure"

_includeScript core.sh

_includeScript program.sh "structure"

_includeScript overrides.sh "structure"

_includeScript entry.sh "structure"

chmod u+x "$progScript"


























