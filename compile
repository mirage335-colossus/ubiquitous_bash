#!/usr/bin/env bash

#Retrieves absolute path of current script, while maintaining symlinks, even when "./" would translate with "readlink -f" into something disregarding symlinked components in $PWD.
#However, will dereference symlinks IF the script location itself is a symlink. This is to allow symlinking to scripts to function normally.
#Suitable for allowing scripts to find other scripts they depend on. May look like an ugly hack, but it has proven reliable over the years.
_getScriptAbsoluteLocation() {
	local absoluteLocation
	if [[ (-e $PWD\/$0) && ($0 != "") ]] && [[ "$1" != "/"* ]]
			then
	absoluteLocation="$PWD"\/"$0"
	absoluteLocation=$(realpath -L -s "$absoluteLocation")
			else
	absoluteLocation=$(realpath -L "$0")
	fi

	if [[ -h "$absoluteLocation" ]]
			then
	absoluteLocation=$(readlink -f "$absoluteLocation")
	absoluteLocation=$(realpath -L "$absoluteLocation")
	fi
	echo $absoluteLocation
}
alias getScriptAbsoluteLocation=_getScriptAbsoluteLocation

#Retrieves absolute path of current script, while maintaining symlinks, even when "./" would translate with "readlink -f" into something disregarding symlinked components in $PWD.
#Suitable for allowing scripts to find other scripts they depend on.
_getScriptAbsoluteFolder() {
	dirname "$(_getScriptAbsoluteLocation)"
}
alias getScriptAbsoluteFolder=_getScriptAbsoluteFolder

#Retrieves absolute path of parameter, while maintaining symlinks, even when "./" would translate with "readlink -f" into something disregarding symlinked components in $PWD.
#Suitable for finding absolute paths, when it is desirable not to interfere with symlink specified folder structure.
_getAbsoluteLocation() {
	if [[ "$1" == "" ]]
	then
		echo
		return
	fi
	
	local absoluteLocation
	if [[ (-e $PWD\/$1) && ($1 != "") ]] && [[ "$1" != "/"* ]]
			then
	absoluteLocation="$PWD"\/"$1"
	absoluteLocation=$(realpath -L -s "$absoluteLocation")
			else
	absoluteLocation=$(realpath -L "$1")
	fi
	echo $absoluteLocation
}
alias getAbsoluteLocation=_getAbsoluteLocation

#Retrieves absolute path of parameter, while maintaining symlinks, even when "./" would translate with "readlink -f" into something disregarding symlinked components in $PWD.
#Suitable for finding absolute paths, when it is desirable not to interfere with symlink specified folder structure.
_getAbsoluteFolder() {
	local absoluteLocation=$(_getAbsoluteLocation "$1")
	dirname "$absoluteLocation"
}
alias getAbsoluteLocation=_getAbsoluteLocation

cd "$(_getScriptAbsoluteFolder)"

export ubiquitiousLibDir="."
[[ -e "./_lib/ubiquitous_bash" ]] && export ubiquitiousLibDir="./_lib/ubiquitous_bash"
export progDir="./_prog"
export progScript="./ubiquitous_bash.sh"

#Checks whether command or function is available.
# WARNING Needed by safeRMR .
_checkDep() {
	if ! type "$1" >/dev/null 2>&1
	then
		echo "$1" missing
		_stop 1
	fi
}

#"$1" == file path
_includeFile() {
	
	if [[ -e  "$1" ]]
	then
		cat "$1" >> "$progScript"
		echo >> "$progScript"
		return 0
	fi
	
	return 1
}

#Provide only approximate, realative paths. These will be disassembled and treated as a search query following stricti preferences
#"generic/filesystem/absolutepaths.sh"
_includeScript() {

	local includeScriptFilename=$(basename "$1")
	local includeScribtSubdirectory=$(dirname "$1")
	
	
	_includeFile "$progDir"/"$includeScribtSubdirectory"/"$includeScriptFilename" && return 0
	
	_includeFile "$progDir"/"$includeScriptFilename" && return 0
	
	_includeFile "$ubiquitiousLibDir"/"$includeScribtSubdirectory"/"$includeScriptFilename" && return 0
	
	_includeFile "$ubiquitiousLibDir"/"$includeScriptFilename" && return 0
	
}

# "$1" == script list array
_includeScripts() {
	local currentIncludeScript
	local historyIncludeScript
	local historyIncludedScript
	local duplicateIncludeScript
	
	for currentIncludeScript in "$@"
	do	
		duplicateIncludeScript="false"
		for historyIncludedScript in "${historyIncludeScript[@]}"
		do
			if [[ "$historyIncludedScript" == "$currentIncludeScript" ]]
			then
				duplicateIncludeScript="true"
			fi
		done
		historyIncludeScript+=("$currentIncludeScript")
		
		[[ "$duplicateIncludeScript" != "true" ]] && _includeScript "$currentIncludeScript"
	done
}

_checkDep basename
_checkDep dirname
_checkDep readlink
_checkDep realpath

##### Dependency Tracking

_deps_chroot() {
	true
}

_deps_qemu() {
	true
}

_deps_docker() {
	true
}

_deps_docker() {
	true
}



#####







rm "$progScript" >/dev/null 2>&1

includeScriptList+=( "generic"/minimalheader.sh )

#####Utilities
includeScriptList+=( "labels"/utilitiesLabel.sh )

includeScriptList+=( "generic"/showCommand.sh )

includeScriptList+=( "generic/filesystem"/absolutepaths.sh )

includeScriptList+=( "generic/filesystem"/getext.sh )

includeScriptList+=( "generic/filesystem"/finddir.sh )

includeScriptList+=( "generic/filesystem"/safedelete.sh )

includeScriptList+=( "generic/filesystem"/discoverresource.sh )

includeScriptList+=( "generic/filesystem/mounts"/bindmountmanager.sh )

includeScriptList+=( "generic/filesystem/mounts"/waitumount.sh )

includeScriptList+=( "generic/filesystem/mounts"/mountchecks.sh )

includeScriptList+=( "generic/process"/timeout.sh )

includeScriptList+=( "generic/process"/waitforprocess.sh )

includeScriptList+=( "generic/process"/daemon.sh )

includeScriptList+=( "generic/process"/remotesig.sh )

includeScriptList+=( "generic/net"/fetch.sh )

includeScriptList+=( "generic/net"/findport.sh )

includeScriptList+=( "generic"/uid.sh )

includeScriptList+=( "generic"/messaging.sh )
includeScriptList+=( "generic"/validaterequest.sh )

includeScriptList+=( "generic"/preserveLog.sh )

includeScriptList+=( "os"/getDep.sh )
includeScriptList+=( "os/distro/debian"/getDep_debian.sh )

includeScriptList+=( "os/unix/systemd"/here_systemd.sh )
includeScriptList+=( "os/unix/systemd"/hook_systemd.sh )

includeScriptList+=( "virtualization"/virtenv.sh )

includeScriptList+=( "virtualization"/osTranslation.sh )
includeScriptList+=( "virtualization"/localPathTranslation.sh )

includeScriptList+=( "virtualization/image"/mountimage.sh )
includeScriptList+=( "virtualization/image"/createImage.sh )
includeScriptList+=( "virtualization/image"/here_bootdisc.sh )
includeScriptList+=( "virtualization/image"/bootdisc.sh )
includeScriptList+=( "virtualization/image"/userpersistenthome.sh )
includeScriptList+=( "virtualization/image"/transferimage.sh )

includeScriptList+=( "virtualization/chroot"/testchroot.sh )

includeScriptList+=( "virtualization/chroot"/procchroot.sh )
includeScriptList+=( "virtualization/chroot"/mountchroot.sh )
includeScriptList+=( "virtualization/chroot"/enterchroot.sh )

includeScriptList+=( "virtualization/chroot"/mountchrootuser.sh )
includeScriptList+=( "virtualization/chroot"/userchroot.sh )
includeScriptList+=( "virtualization/chroot"/dropchroot.sh )

includeScriptList+=( "virtualization/qemu"/qemu-raspi-raspi.sh )
includeScriptList+=( "virtualization/qemu"/qemu-x64-raspi.sh )
includeScriptList+=( "virtualization/qemu"/qemu-x64-x64.sh )
includeScriptList+=( "virtualization/qemu"/qemu.sh )

includeScriptList+=( "virtualization/vbox"/vboxtest.sh )
includeScriptList+=( "virtualization/vbox"/vboxmount.sh )
includeScriptList+=( "virtualization/vbox"/vboxlab.sh )
includeScriptList+=( "virtualization/vbox"/vboxuser.sh )

includeScriptList+=( "virtualization/dosbox"/here_dosbox.sh )
includeScriptList+=( "virtualization/dosbox"/dosbox.sh )

includeScriptList+=( "virtualization/wine"/wine.sh )

includeScriptList+=( "virtualization/docker"/here_docker.sh )
includeScriptList+=( "virtualization/docker"/dockerdrop.sh )
includeScriptList+=( "virtualization/docker"/dockertest.sh )
includeScriptList+=( "virtualization/docker"/dockerchecks.sh )
includeScriptList+=( "virtualization/docker"/dockeruser.sh )

includeScriptList+=( "special"/mustberoot.sh )
includeScriptList+=( "special"/mustgetsudo.sh )

includeScriptList+=( "special/gosu"/gosu.sh )

includeScriptList+=( "special"/uuid.sh )

#####Shortcuts
includeScriptList+=( "labels"/shortcutsLabel.sh )

includeScriptList+=( "shortcuts/dev"/devsearch.sh )

includeScriptList+=( "shortcuts/git"/git.sh )
includeScriptList+=( "shortcuts/git"/gitBare.sh )

includeScriptList+=( "shortcuts/mkboot"/here_mkboot.sh )
includeScriptList+=( "shortcuts/mkboot"/mkboot.sh )

includeScriptList+=( "shortcuts/distro"/distro.sh )

includeScriptList+=( "shortcuts/distro/debian"/createDebian.sh )
includeScriptList+=( "shortcuts/distro/raspbian"/createRaspbian.sh )

includeScriptList+=( "shortcuts/prompt"/visualPrompt.sh )

includeScriptList+=( "shortcuts/x11"/testx11.sh )
includeScriptList+=( "shortcuts/x11/clipboard"/x11ClipboardImage.sh )

includeScriptList+=( "shortcuts/docker"/dockerassets.sh )
includeScriptList+=( "shortcuts/docker"/dockerdelete.sh )
includeScriptList+=( "shortcuts/docker"/dockercreate.sh )
includeScriptList+=( "shortcuts/docker"/dockerconvert.sh )
includeScriptList+=( "shortcuts/docker"/dockerportation.sh )
includeScriptList+=( "shortcuts/docker"/dockercontainer.sh )

includeScriptList+=( "shortcuts"/setupUbiquitous.sh )

#####Basic Variable Management
includeScriptList+=( "labels"/basicvarLabel.sh )

#####Global variables.
includeScriptList+=( "structure"/globalvars.sh )

includeScriptList+=( "structure"/specglobalvars.sh )

includeScriptList+=( "virtualization/vbox"/vboxvars.sh )
includeScriptList+=( "virtualization/docker"/dockervars.sh )

includeScriptList+=( "shortcuts/git"/gitVars.sh )

includeScriptList+=( "structure"/localfs.sh )

includeScriptList+=( "structure"/localenv.sh )

includeScriptList+=( "generic/hello"/hello.sh )
includeScriptList+=( "generic/process"/idle.sh )

includeScriptList+=( "structure"/installation.sh )

includeScriptList+=( core.sh )

includeScriptList+=( "structure"/program.sh )

includeScriptList+=( "structure"/overrides.sh )

includeScriptList+=( "structure"/entry.sh )









_includeScripts "${includeScriptList[@]}"

chmod u+x "$progScript"

if "$progScript" _test > ./compile.log 2>&1
then
	rm compile.log
else
	exit 1
fi
























