#!/usr/bin/env bash

#Critical prerequsites.
_getAbsolute_criticalDep() {
	! type realpath > /dev/null 2>&1 && return 1
	! type readlink > /dev/null 2>&1 && return 1
	! type dirname > /dev/null 2>&1 && return 1
	
	#Known issue on Mac. See https://github.com/mirage335/ubiquitous_bash/issues/1 .
	! realpath -L . > /dev/null 2>&1 && return 1
	
	return 0
}
! _getAbsolute_criticalDep && exit 1

#####Utilities.
#Retrieves absolute path of current script, while maintaining symlinks, even when "./" would translate with "readlink -f" into something disregarding symlinked components in $PWD.
#However, will dereference symlinks IF the script location itself is a symlink. This is to allow symlinking to scripts to function normally.
#Suitable for allowing scripts to find other scripts they depend on. May look like an ugly hack, but it has proven reliable over the years.
_getScriptAbsoluteLocation() {
	if [[ "$0" == "-"* ]]
	then
		return 1
	fi
	
	local absoluteLocation
	if [[ (-e $PWD\/$0) && ($0 != "") ]] && [[ "$0" != "/"* ]]
			then
	absoluteLocation="$PWD"\/"$0"
	absoluteLocation=$(realpath -L -s "$absoluteLocation")
			else
	absoluteLocation=$(realpath -L "$0")
	fi

	if [[ -h "$absoluteLocation" ]]
			then
	absoluteLocation=$(readlink -f "$absoluteLocation")
	absoluteLocation=$(realpath -L "$absoluteLocation")
	fi
	echo $absoluteLocation
}

#Retrieves absolute path of current script, while maintaining symlinks, even when "./" would translate with "readlink -f" into something disregarding symlinked components in $PWD.
#Suitable for allowing scripts to find other scripts they depend on.
_getScriptAbsoluteFolder() {
	if [[ "$0" == "-"* ]]
	then
		return 1
	fi
	
	dirname "$(_getScriptAbsoluteLocation)"
}

#Retrieves absolute path of parameter, while maintaining symlinks, even when "./" would translate with "readlink -f" into something disregarding symlinked components in $PWD.
#Suitable for finding absolute paths, when it is desirable not to interfere with symlink specified folder structure.
_getAbsoluteLocation() {
	if [[ "$1" == "-"* ]]
	then
		return 1
	fi
	
	if [[ "$1" == "" ]]
	then
		echo
		return
	fi
	
	local absoluteLocation
	if [[ (-e $PWD\/$1) && ($1 != "") ]] && [[ "$1" != "/"* ]]
			then
	absoluteLocation="$PWD"\/"$1"
	absoluteLocation=$(realpath -L -s "$absoluteLocation")
			else
	absoluteLocation=$(realpath -L "$1")
	fi
	echo $absoluteLocation
}

#https://unix.stackexchange.com/questions/27021/how-to-name-a-file-in-the-deepest-level-of-a-directory-tree?answertab=active#tab-top
_filter_lowestPath() {
	awk -F'/' 'NF > depth {
depth = NF;
deepest = $0;
}
END {
print deepest;
}'
}

#https://stackoverflow.com/questions/1086907/can-find-or-any-other-tool-search-for-files-breadth-first
_filter_highestPath() {
	awk -F'/' '{print "", NF, $F}' | sort -n | awk '{print $2}' | head -n 1
}

_recursion_guard() {
	! [[ -e "$1" ]] && return 1
	
	! type "$1" >/dev/null 2>&1 && return 1
	
	local launchGuardScriptAbsoluteLocation
	launchGuardScriptAbsoluteLocation=$(_getScriptAbsoluteLocation)
	local launchGuardTestAbsoluteLocation
	launchGuardTestAbsoluteLocation=$(_getAbsoluteLocation "$1")
	[[ "$launchGuardScriptAbsoluteLocation" == "$launchGuardTestAbsoluteLocation" ]] && return 1
	
	return 0
}

#Generates random alphanumeric characters, default length 18.
_uid() {
	local uidLength
	! [[ -z "$1" ]] && uidLength="$1" || uidLength=18
	
	cat /dev/urandom 2> /dev/null | base64 2> /dev/null | tr -dc 'a-zA-Z0-9' 2> /dev/null | head -c "$uidLength" 2> /dev/null
}

#Universal debugging filesystem.
_user_log_anchor() {
	# DANGER Do NOT create automatically, or reference any existing directory!
	! [[ -d "$HOME"/.ubcore/userlog ]] && cat - > /dev/null 2>&1 && return 1
	
	#Terminal session may be used - the sessionid may be set through .bashrc/.ubcorerc .
	if [[ "$sessionid" != "" ]]
	then
		cat - >> "$HOME"/.ubcore/userlog/a-"$sessionid".log
		return
	fi
	cat - >> "$HOME"/.ubcore/userlog/a-undef.log
}

#Cyan. Harmless status messages.
_messagePlain_nominal() {
	echo -e -n '\E[0;36m '
	echo -n "$@"
	echo -e -n ' \E[0m'
	echo
	return 0
}

#Blue. Diagnostic instrumentation.
_messagePlain_probe() {
	echo -e -n '\E[0;34m '
	echo -n "$@"
	echo -e -n ' \E[0m'
	echo
	return 0
}

#Green. Working as expected.
_messagePlain_good() {
	echo -e -n '\E[0;32m '
	echo -n "$@"
	echo -e -n ' \E[0m'
	echo
	return 0
}

#Yellow. May or may not be a problem.
_messagePlain_warn() {
	echo -e -n '\E[1;33m '
	echo -n "$@"
	echo -e -n ' \E[0m'
	echo
	return 0
}

#Red. Will result in missing functionality, reduced performance, etc, but not necessarily program failure overall.
_messagePlain_bad() {
	echo -e -n '\E[0;31m '
	echo -n "$@"
	echo -e -n ' \E[0m'
	echo
	return 0
}

#Demarcate major steps.
_messageNormal() {
	echo -e -n '\E[1;32;46m '
	echo -n "$@"
	echo -e -n ' \E[0m'
	echo
	return 0
}

#Demarcate major failures.
_messageError() {
	echo -e -n '\E[1;33;41m '
	echo -n "$@"
	echo -e -n ' \E[0m'
	echo
	return 0
}

#https://stackoverflow.com/questions/4210042/how-to-exclude-a-directory-in-find-command/16595367#16595367
_findAnchor() {
	local anchorCurrentSearchDir
	anchorCurrentSearchDir="$1"
	shift
	
	find -L "$anchorCurrentSearchDir" -not \( -path \*.git\* -prune \) -not \( -path \*_arc\* -prune \) -not \( -path \*_buried\* -prune \) -not \( -path \*_lib\* -prune \) -not \( -path \*_local\* -prune \) -not \( -path \*_local/_index\* -prune \) -not \( -path \*_local/h\* -prune \) -not \( -path \*h_/\* -prune \) -not \( -path \*w_/\* -prune \) "$@"
}

#Recursively searches for directories.
_findAnchorSource() {
	local anchorCurrentSearchDir
	anchorCurrentSearchDir="$1"
	shift
	
	local anchorCurrentSearchDirAbsolute
	anchorCurrentSearchDirAbsolute=$(_getAbsoluteLocation "$anchorCurrentSearchDir")
	
	_findAnchor "$anchorCurrentSearchDir" -path \*"$anchorSourcePath"
	
	return
}

#Recursively searches for directories.
_findAnchorName() {
	local anchorCurrentSearchDir
	anchorCurrentSearchDir="$1"
	shift
	
	local anchorCurrentSearchDirAbsolute
	anchorCurrentSearchDirAbsolute=$(_getAbsoluteLocation "$anchorCurrentSearchDir")
	
	_findAnchor "$anchorCurrentSearchDir" -path \*_index/"$anchorName"
	
	return
}

_check_anchor() {
	local anchorCheckLine
	while IFS='' read -r anchorCheckLine || [[ -n "$anchorCheckLine" ]]
	do
		#Conventionally a git submodule for compile purposes only.
		[[ "$anchorCheckLine" == *'_lib/ubiquitous_bash/ubiquitous_bash.sh' ]] && continue
		
		[[ "$anchorCheckLine" != *"$anchorSource" ]] && [[ "$anchorCheckLine" != *'ubiquitous_bash.sh' ]] && [[ "$anchorCheckLine" != *"$anchorName" ]] && continue
		
		! _recursion_guard "$anchorCheckLine" && continue
		
		_getAbsoluteLocation "$anchorCheckLine"
	done
}

_launch_anchor() {
	_messagePlain_nominal 'anchorName='"$anchorName" | _user_log_anchor

	_messagePlain_probe 'anchorScriptAbsoluteLocation='"$anchorScriptAbsoluteLocation" | _user_log_anchor
	_messagePlain_probe 'anchorScriptAbsoluteFolder='"$anchorScriptAbsoluteFolder" | _user_log_anchor

	_messagePlain_probe 'anchorSourcePath='"$anchorSourcePath" | _user_log_anchor
	_messagePlain_probe 'anchorLabName='"$anchorLabName" | _user_log_anchor
	_messagePlain_probe 'anchorLabNameAlt='"$anchorLabNameAlt" | _user_log_anchor
	_messagePlain_probe 'anchorEntity='"$anchorEntity" | _user_log_anchor
	
	local recursionExec
	local anchorParent
	
	recursionExec="$anchorScriptAbsoluteFolder"/../"$anchorSourcePath"
	if _recursion_guard "$recursionExec"
	then
		_messagePlain_good 'self: '"$recursionExec"  "$anchorName" "$@" | _user_log_anchor
		"$recursionExec" "$anchorName" "$@"
		exit $?
	fi
	
	anchorDestination=$(_findAnchorSource "$anchorScriptAbsoluteFolder"/.. | _check_anchor | _filter_lowestPath)
	if [[ "$anchorDestination" != "" ]]
	then
		if [[ "$anchorDestination" == *"ubiquitous_bash.sh" ]]
		then
			_messagePlain_good 'launch: '"$anchorDestination" "$anchorName" "$@" | _user_log_anchor
			"$anchorDestination" "$anchorName" "$@"
			exit $?
		fi
		_messagePlain_good 'launch: '"$anchorDestination" "$@" | _user_log_anchor
		"$anchorDestination" "$@"
		exit $?
	fi
	
	anchorParent=$(_getAbsoluteLocation "$anchorScriptAbsoluteFolder"/../..)
	_messagePlain_probe 'anchorParent='"$anchorParent" | _user_log_anchor
	if [[ "$anchorScriptAbsoluteFolder" == *"_local/_index" ]]
	then
		_messagePlain_probe 'detected: parent: _local/_index' | _user_log_anchor
		anchorDestination=$(_findAnchorName "$anchorParent" | _check_anchor | _filter_highestPath)
		if [[ "$anchorDestination" != "" ]]
		then
			_messagePlain_probe 'anchorDestination='"$anchorDestination" | _user_log_anchor
			_messagePlain_good 'launch: '"$anchorDestination" "$@" | _user_log_anchor
			"$anchorDestination" "$@"
			exit $?
		fi
	fi
	
	recursionExec="$HOME"/core/infrastructure/vm/"$anchorSourcePath"
	if _recursion_guard "$recursionExec"
	then
		_messagePlain_good 'launch: '"$recursionExec" "$@" | _user_log_anchor
		"$recursionExec" "$anchorName" "$@"
		exit $?
	fi

	recursionExec="$HOME"/core/extra/infrastructure/vm/"$anchorSourcePath"
	if _recursion_guard "$recursionExec"
	then
		_messagePlain_good 'launch: '"$recursionExec" "$@" | _user_log_anchor
		"$recursionExec" "$anchorName" "$@"
		exit $?
	fi
	
	recursionExec="$HOME"/core/installations/"$anchorSourcePath"
	if _recursion_guard "$recursionExec"
	then
		_messagePlain_good 'launch: '"$recursionExec" "$@" | _user_log_anchor
		"$recursionExec" "$anchorName" "$@"
		exit $?
	fi

	recursionExec="$HOME"/core/extra/installations/"$anchorSourcePath"
	if _recursion_guard "$recursionExec"
	then
		_messagePlain_good 'launch: '"$recursionExec" "$@" | _user_log_anchor
		"$recursionExec" "$anchorName" "$@"
		exit $?
	fi

	recursionExec="$HOME"/core/lab/"$anchorEntity""$anchorLabName"/_index/"$anchorName"
	if _recursion_guard "$recursionExec"
	then
		_messagePlain_good 'launch: '"$recursionExec" "$@" | _user_log_anchor
		"$recursionExec" "$@"
		exit $?
	fi

	recursionExec="$HOME"/core/extra/lab/"$anchorEntity""$anchorLabName"/_index/"$anchorName"
	if _recursion_guard "$recursionExec"
	then
		_messagePlain_good 'launch: '"$recursionExec" "$@" | _user_log_anchor
		"$recursionExec" "$@"
		exit $?
	fi

	recursionExec="$HOME"/core/lab/"$anchorEntity""$anchorLabNameAlt"/_index/"$anchorName"
	if _recursion_guard "$recursionExec"
	then
		_messagePlain_good 'launch: '"$recursionExec" "$@" | _user_log_anchor
		"$recursionExec" "$@"
		exit $?
	fi

	recursionExec="$HOME"/core/extra/lab/"$anchorEntity""$anchorLabNameAlt"/_index/"$anchorName"
	if _recursion_guard "$recursionExec"
	then
		_messagePlain_good 'launch: '"$recursionExec" "$@" | _user_log_anchor
		"$recursionExec" "$@"
		exit $?
	fi
	_messagePlain_bad 'missing: '"$anchorSource" | _user_log_anchor
}

export anchorScriptAbsoluteLocation=$(_getScriptAbsoluteLocation)
export anchorScriptAbsoluteFolder=$(_getScriptAbsoluteFolder)
export anchorName=$(basename "$anchorScriptAbsoluteLocation")

export anchorSource="ubiquitous_bash.sh"
export anchorSourcePath=ubiquitous_bash/"$anchorSource"

export anchorLabName=anchorLabName
export anchorLabNameAlt="$anchorLabName"Mini

export anchorEntity=""
#export anchorEntity="entity/"

_launch_anchor "$@"

#_findAnchorName .

