

# Suggested defaults. If your python code (not python itself, nor venv, etc, but filenames for files your python application uses, such as datasets, models, etc) insists on absolute paths, and you must use it under both UNIX/Linux and Cygwin/MSW, then it is probably only needed temporarily to generate static assets (ie. occasional experimental fine-tuning of the latest available AI models). In which case you can put into production under solely UNIX/Linux if necessary, and develop with Docker (ie. factory) instead.
# tldr; UNIX/Linux for python in production, Cygwin/MSW (ie. MSW native python) for python in development, as usual, and then you won't need abstractfs .
#
#_set_abstractfs_alwaysUNIXneverNative
#_set_abstractfs_disable



# ATTENTION: EXAMPLE. Override or implement alternative with 'core.sh', 'ops.sh', or similar.
# ATTENTION: Also create "$scriptLib"/python/lean.py .
_msw_python() {
    #export dependencies_msw_python=( "pyreadline3" )
    #export packages_msw_python=( "huggingface_hub[cli]" )

    #implies sequence
    _prepare_msw_python


    # ATTENTION: Dropping to an interactive shell in the midst of a bash function which provides standard output to another bash function
    #
    # ie. don't expect guaranteed sanity doing something like this in either bash or python
    # echo $( echo result ; bash -i ) | tee > ./logfile.txt
    #
    # ALWAYS call interactively unless 'stdout' will be consumed. Functions, scripts, commands, get an interactive terminal to talk to, except very simple functions.
    #
    # ie. _fineTune_model  <->  Interactive Shell
    # ie. _vector_model  <->  Interactive Shell
    # ie. _inferenceModel | grep 'stuff' > description.txt  <->  Interactive Shell
    # ie. result=$(_inferenceModel | grep 'correct')  <->  Non-Interactive
    #
    # Unfortunately, bash function calls from python do not enjoy the '$() > /dev/null 2>&1' syntactic convenience.
    # Python calls to '_bin()' , '_bash()' , etc, must explicitly declare or implicitly default sanely whether interactive or non-interactive captured output.
    
    # lean.py ... is a template script from 'ubiquitous_bash' for lightweight manual changes
    #"$scriptLocal"/python_msw/lean.py   #automatically replaced with autogenerated lean.py
    #"$scriptLib"/python_msw/lean.py    #ATTTENTION: create persistent custom lean.py here


    # WARNING: May be untested.
    #python "$scriptLib_msw"'\python\lean.py' '_bin(["sleep", "90",], True, r"'"$scriptCall_bin_msw"'")'

    #python "$scriptAbsoluteFolder_msw"'\lean.py' '_bash(["-i"], True, r"'"$scriptCall_bash_msw"'")'

    python "$scriptAbsoluteFolder_msw"'\lean.py' '_bin(["_demo_msw_python",], True, r"'"$scriptCall_bin_msw"'", interactive=True)'

    #python -i "$scriptAbsoluteFolder_msw"'\lean.py' '_python()'

    #_bash
}
_msw_python_bash() {
    #export dependencies_msw_python=( "pyreadline3" )
    #export packages_msw_python=( "huggingface_hub[cli]" )

    #implies sequence
    _prepare_msw_python

    _bash
}
_msw_python_bin() {
    #export dependencies_msw_python=( "pyreadline3" )
    #export packages_msw_python=( "huggingface_hub[cli]" )

    #implies sequence
    _prepare_msw_python

    _bin "$@"
}


# ATTENTION: Call from '_test_prog' with 'core.sh' or similar.
# _setup calls _test calls _test_prog
_test_msw_python() {
    #export dependencies_msw_python=( "pyreadline3" )
    #export packages_msw_python=( "huggingface_hub[cli]" )

    _prepare_msw_python
}










# EXAMPLE. Override or implement alternative with 'core.sh', 'ops.sh', or similar.
_prepare_msw_python() {
    _prepare_msw_python_3
}
_prepare_msw_python_3() {
    _prepare_msw_python_3_10
}
# EXAMPLE. Override or implement alternative (discouraged) with 'core.sh', 'ops.sh', or similar, if necessary.
_prepare_msw_python_3_10() {
    _set_msw_python_3_10

    # ATTENTION: implies sequence
    local currentUID="$sessionid"

    # ATTENTION: Do NOT enable. Prevents 'trap' cleanup of abandoned lock file.
    #local currentUID=$(_uid 18)

    local currentUID_length=${#currentUID}
    local currentUID_length_plus1=$(( currentUID_length + 1 ))

    local currentPATH="$PATH"

    _write_python_hook_local() {
        _messagePlain_nominal 'prepare: python hook' > /dev/null >&2
    
        local ubcore_accessoriesFile_python
        local ubcoreDir_accessories_python
        local ubcore_accessoriesFile_python_ubhome

        ubcore_accessoriesFile_python=$(cygpath -w "$scriptLib"/python_msw/lean.py)
        ubcoreDir_accessories_python=$(cygpath -w "$scriptLib"/python_msw)
        ubcore_accessoriesFile_python_ubhome=$(cygpath -w "$scriptLib"/python_msw/lean.py)
        if [[ ! -e "$ubcore_accessoriesFile_python" ]] || [[ ! -e "$ubcoreDir_accessories_python" ]] || [[ ! -e "$ubcore_accessoriesFile_python_ubhome" ]]
        then
            ( _messagePlain_warn 'warn: missing: scriptLib/python_msw/...' >&2 ) > /dev/null
            
            ubcore_accessoriesFile_python=$(cygpath -w "$scriptLocal"/python_msw/lean.py)
            ubcoreDir_accessories_python=$(cygpath -w "$scriptLocal"/python_msw)
            ubcore_accessoriesFile_python_ubhome=$(cygpath -w "$scriptLocal"/python_msw/lean.py)
            if [[ ! -e "$ubcore_accessoriesFile_python" ]] || [[ ! -e "$ubcoreDir_accessories_python" ]] || [[ ! -e "$ubcore_accessoriesFile_python_ubhome" ]]
            then
                ( _messagePlain_warn 'warn: missing: scriptLocal/python_msw/...' >&2 ) > /dev/null
            fi
        fi

        local ubcore_ubcorerc_pythonrc="lean"
        
        _setupUbiquitous_accessories_here-python_hook > "$scriptLocal"/python_msw/pythonrc."$currentUID"
        if [[ ! -e "$scriptLocal"/python_msw/pythonrc ]] || ! diff --unified=3 "$scriptLocal"/python_msw/pythonrc."$currentUID" "$scriptLocal"/python_msw/pythonrc > /dev/null
        then
            mv -f "$scriptLocal"/python_msw/pythonrc."$currentUID" "$scriptLocal"/python_msw/pythonrc
        else
            rm -f "$scriptLocal"/python_msw/pythonrc."$currentUID"
        fi
        
        export _PYTHONSTARTUP=$(cygpath -w "$scriptLocal"/python_msw/pythonrc)
        export PYTHONSTARTUP="$_PYTHONSTARTUP"
    }
    unset _PYTHONSTARTUP
    

    local current_done__prepare_msw_python_procedure="false"


    _lock_prepare_python_msw() {
        _messagePlain_nominal 'prepare: wait: lock: _lock_prepare_python_msw' > /dev/null >&2
        local dateA
        local dateB
        local dateDelta
        while [[ $(cat "$scriptLocal"/python_msw.lock 2> /dev/null | head -c "$currentUID_length") != "$currentUID" ]]
        do
            if [[ ! -e "$scriptLocal"/python_msw.lock ]]
            then
                echo "$currentUID"$(date +%s | tr -dc '0-9') > "$scriptLocal"/python_msw.lock."$currentUID"
                mv -f "$scriptLocal"/python_msw.lock."$currentUID" "$scriptLocal"/python_msw.lock
            fi

            sleep 7
            [[ $(cat "$scriptLocal"/python_msw.lock 2> /dev/null | head -c "$currentUID_length") == "$currentUID" ]] && return 0

            _messagePlain_probe "wait: lock" > /dev/null >&2

            while [[ -e "$scriptLocal"/python_msw.lock ]] && [[ $(cat "$scriptLocal"/python_msw.lock 2> /dev/null | head -c "$currentUID_length") != "$currentUID" ]]
            do
                dateA=$(cat "$scriptLocal"/python_msw.lock 2> /dev/null | tail -c +"$currentUID_length_plus1" | tr -dc '0-9')
                dateB=$(date +%s | tr -dc '0-9')
                _messagePlain_probe "$dateB - $dateA"
                dateDelta=$(bc <<< "$dateB - $dateA" 2> /dev/null)

                sleep 7

                # Normal prepare time is <<2minutes, if that.
                [[ "$dateDelta" -gt "2700" ]] && rm -f "$scriptLocal"/python_msw.lock
            done
        done
    }
    _lock_prepare_python_msw
    #...
    #rm -f "$scriptLocal"/python_msw.lock

    # WARNING: Do not add '-msw_python_3_10' or similar suffix to dumbpath_file . Use separate derivative projects for separate venv as normally needed for different python versions.
    local dumbpath_file="$scriptLocal"/"$dumbpath_prefix"dumbpath.var
    local dumbpath_contents=""
    dumbpath_contents=$(cat "$dumbpath_file" 2> /dev/null)
    if [[ "$dumbpath_contents" != "$dumbpath_file" ]]
    then
        # ATTENTION: WARNING: Anaconda is usually unnecessary, STRONGLY DISCOURAGED, and NOT automatically installed (eg. with 'ubdist/OS').
        # Automatic installation of Anaconda is not expected useful for any purpose - only workstations for personal evaluation of open-source projects which happen to use Anaconda for a non=production purpose are expected to use Anaconda, if at all.
        # Manual installation of Anaconda:
        # https://docs.conda.io/projects/conda/en/latest/user-guide/install/windows.html
        # https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html



        

        # erase any venv, etc, which may use absolute paths
        _messagePlain_nominal 'prepare: python_msw' > /dev/null >&2

        export safeToDeleteGit="true"
        _safeRMR "$scriptLocal"/python_msw
        mkdir -p "$scriptLocal"/python_msw


        #[[ "$current_done__prepare_msw_python_procedure" == "false" ]] && 
        _prepare_msw_python_procedure
        current_done__prepare_msw_python_procedure="true"


        
        # write python hook ; mv -f

        #[[ "$_PYTHONSTARTUP" == "" ]] && 
        _write_python_hook_local


#if false
#then
        # rebuild venv...
        _messagePlain_nominal 'prepare: venv' > /dev/null >&2
        
        mkdir -p "$scriptLocal"/python_msw/venv
        ! cd "$scriptLocal"/python_msw/venv && _stop 1
        python3 -m venv default_venv > /dev/null >&2

        
        cp -a default_venv/Scripts/activate default_venv/Scripts/activate_msw
        dos2unix default_venv/Scripts/activate_msw
        chmod u+x default_venv/Scripts/activate_msw

        #source default_venv/Scripts/activate > /dev/null >&2
        _messagePlain_probe source default_venv/Scripts/activate_msw > /dev/null >&2
        source default_venv/Scripts/activate_msw > /dev/null >&2
        PATH="$currentPATH"

        _messagePlain_nominal 'prepare: venv: set' > /dev/null >&2
        _set_msw_python_procedure

        _messagePlain_probe _install_dependencies_msw_python_procedure-specific "" "" > /dev/null >&2
        _install_dependencies_msw_python_procedure-specific "" ""
        
        _messagePlain_probe python -c "import sys; print(sys.path)" > /dev/null >&2
        python -c "import sys; print(sys.path)" > /dev/null >&2

        #deactivate > /dev/null >&2
#fi



        # morsels...
        _messagePlain_nominal 'prepare: morsels: pip' > /dev/null >&2

        _morsels_msw_pip_python_3_10











        # write > "$dumbpath_file" ; mv -f

        # ATTENTION: Disable (ie. comment out) to force always rebuild, packages install, etc.
        echo "$dumbpath_file" > "$dumbpath_file"."$currentUID"
        mv -f "$dumbpath_file"."$currentUID" "$dumbpath_file"



    fi

    [[ "$current_done__prepare_msw_python_procedure" == "false" ]] && _prepare_msw_python_procedure
    current_done__prepare_msw_python_procedure="true"

    [[ "$_PYTHONSTARTUP" == "" ]] && _write_python_hook_local

#if false
#then
    _messagePlain_nominal 'prepare: venv: activate' > /dev/null >&2
    ! cd "$scriptLocal"/python_msw/venv && _stop 1
    #sourcedefault_venv/Scripts/activate > /dev/null >&2
    _messagePlain_probe source  default_venv/Scripts/activate_msw > /dev/null >&2
    source default_venv/Scripts/activate_msw > /dev/null >&2
    PATH="$currentPATH"

    _messagePlain_nominal 'prepare: venv: set' > /dev/null >&2
    _set_msw_python_procedure
    
    _messagePlain_probe python -c "import sys; print(sys.path)" > /dev/null >&2
    python -c "import sys; print(sys.path)" > /dev/null >&2
#fi

    _messagePlain_probe _install_dependencies_msw_python_procedure-specific "" "" > /dev/null >&2
    _install_dependencies_msw_python_procedure-specific "" ""





    #set ACCELERATE="%VENV_DIR%\Scripts\accelerate.exe"


    rm -f "$scriptLocal"/python_msw.lock
    _messagePlain_nominal 'done: prepare: '${FUNCNAME[0]} > /dev/null >&2
}







# EXAMPLE. Override (preferred) or implement alternative (discouraged) with 'core.sh', 'ops.sh', or similar.
_morsels_msw_pip_python_3_10() {
    #export packages_msw_python=( "huggingface_hub[cli]" )
    local currentPackages_indicator_list=( "huggingface_hub[cli]" "${packages_msw_python[@]}" )
    local currentPackages_list=( "huggingface_hub[cli]" )
    local currentPackage

    #export nonet_available="true"
    ( ! wget -qO- 'https://github.com' > /dev/null || ! wget -qO- 'https://pypi.org/simple/' | head > /dev/null ) && export nonet_available="true"
    local currentIteration_nonet="0"
    while [[ "$nonet_available" == "true" ]] && [[ "$CI" != "" ]] && [[ "$currentIteration_nonet" -lt 90 ]]
    do
        ( wget -qO- 'https://github.com' > /dev/null && wget -qO- 'https://pypi.org/simple/' | head > /dev/null ) && export nonet_available="" && unset nonet_available
        let currentIteration_nonet++
    done

    local currentWork="false"
    for currentPackage in "${currentPackages_indicator_list[@]}"
    do
        ! pip show "$currentPackage" > /dev/null 2>&1 && currentWork="true"
        #! python -m pip show "$currentPackage" > /dev/null 2>&1 && currentWork="true"
    done
    [[ "$currentWork" == "false" ]] && return 0

    [[ "$nonet" != "true" ]] && [[ "$nonet_available" != "true" ]] && python -m pip install --upgrade pip > /dev/null >&2

    for currentPackage in "${currentPackages_list[@]}"
    do
        #,win32,win_arm64
        [[ "$nonet" != "true" ]] && [[ "$nonet_available" != "true" ]] && pip download "$currentPackage" --platform win_amd64 --only-binary=:all: --dest "$(cygpath -w "$scriptAbsoluteFolder"/_bundle/morsels/pip)" > /dev/null >&2
        
        pip install --no-index --find-links="$(cygpath -w "$scriptAbsoluteFolder"/_bundle/morsels/pip)" "$currentPackage" > /dev/null >&2

        # Strongly discouraged! Avoid surprise breakage by never relying on upstream repositories.
        #[[ "$nonet" != "true" ]] && [[ "$nonet_available" != "true" ]] && pip install "$currentPackage" > /dev/null >&2
    done
}

























_discover-msw_python() {
    _discover_procedure-msw_python "$@"
    if [[ "$lib_dir_msw_python_wheels" != "" ]]
    then
        export lib_dir_msw_python_wheels_msw=$(cygpath -w "$lib_dir_msw_python_wheels")
        if [[ "$_PATH_pythonDir" != "" ]]
        then
            export lib_dir_msw_python_wheels_relevant="$lib_dir_msw_python_wheels_msw"
        else
            export lib_dir_msw_python_wheels_relevant="$lib_dir_msw_python_wheels"
        fi
        return 0
    fi
    export lib_dir_msw_python_wheels_msw=""
    unset lib_dir_msw_python_wheels_msw
    export lib_dir_msw_python_wheels_relevant=""
    unset lib_dir_msw_python_wheels_relevant
    return 1
}
_discover_procedure-msw_python() {
    export lib_dir_msw_python_wheels
    
    export lib_dir_msw_python_wheels="$scriptAbsoluteFolder"/.python_wheels/msw
    if [[ -e "$lib_dir_msw_python_wheels" ]]
    then
        . "$lib_dir_msw_python_wheels"/_msw_python_wheels.sh
        return 0
    fi
    export lib_dir_msw_python_wheels="$scriptLocal"/.python_wheels/msw
    if [[ -e "$lib_dir_msw_python_wheels" ]]
    then
        . "$lib_dir_msw_python_wheels"/_msw_python_wheels.sh
        return 0
    fi
    export lib_dir_msw_python_wheels="$scriptLib"/.python_wheels/msw
    if [[ -e "$lib_dir_msw_python_wheels" ]]
    then
        . "$lib_dir_msw_python_wheels"/_msw_python_wheels.sh
        return 0
    fi

    
    export lib_dir_msw_python_wheels="$scriptLib"/ubiquitous_bash/_lib/.python_wheels/msw
    if [[ -e "$lib_dir_msw_python_wheels" ]]
    then
        . "$lib_dir_msw_python_wheels"/_msw_python_wheels.sh
        return 0
    fi
    export lib_dir_msw_python_wheels="$scriptLib"/ubDistBuild/_lib/ubiquitous_bash/_lib/.python_wheels/msw
    if [[ -e "$lib_dir_msw_python_wheels" ]]
    then
        . "$lib_dir_msw_python_wheels"/_msw_python_wheels.sh
        return 0
    fi

    export lib_dir_msw_python_wheels=""
    unset lib_dir_msw_python_wheels
}
_install_dependencies_msw_python_procedure-specific() {
    _messagePlain_nominal 'install: dependencies' > /dev/null >&2

    _discover-msw_python

    # Not all of these packages are necessary for dist/OS other than native MSWindows.
    #export dependencies_msw_python=( "pyreadline3" )
    local currentPackages_list=( "pyreadline3" "colorama" "${dependencies_msw_python[@]}" )
    local currentPackage

    #export nonet_available="true"
    ( ! wget -qO- 'https://github.com' > /dev/null || ! wget -qO- 'https://pypi.org/simple/' | head > /dev/null ) && export nonet_available="true"
    local currentIteration_nonet="0"
    while [[ "$nonet_available" == "true" ]] && [[ "$CI" != "" ]] && [[ "$currentIteration_nonet" -lt 90 ]]
    do
        ( wget -qO- 'https://github.com' > /dev/null && wget -qO- 'https://pypi.org/simple/' | head > /dev/null ) && export nonet_available="" && unset nonet_available
        let currentIteration_nonet++
    done
    

    if [[ "$nonet" != "true" ]] && [[ "$nonet_available" != "true" ]]
    then
        _pip_upgrade() {
            local currentUpgrade="false"
            for currentPackage in "${currentPackages_list[@]}"
            do
                ! "$1"pip show "$currentPackage" > /dev/null 2>&1 && currentUpgrade="true"
                #! "$2"python -m pip show "$currentPackage" > /dev/null 2>&1 && currentUpgrade="true"
            done
            [[ "$currentUpgrade" == "false" ]] && return 0
            "$2"python -m pip install --upgrade pip > /dev/null >&2
        }
        _pip_upgrade "$1" "$2"
    fi


    if [[ "$nonet" != "true" ]] && [[ "$nonet_available" != "true" ]]
    then

        if [[ "$lib_dir_msw_python_wheels" != "" ]]
        then
            # ATTRIBUTION-AI: ChatGPT o3  2025-04-19  (partially)
            _pip_download() {
                "$1"pip show "$3" > /dev/null 2>&1 && return 0
                #"$2"python -m pip show "$3" > /dev/null 2>&1 && return 0

                #--python-version 3.1
                "$1"pip download "$3" --platform win_amd64 --only-binary=:all: --dest "$lib_dir_msw_python_wheels_relevant" > /dev/null >&2
                #"$1"pip download "$3" --platform win32 --only-binary=:all: --dest "$lib_dir_msw_python_wheels_relevant" > /dev/null >&2
                "$1"pip download "$3" --platform win_arm64 --only-binary=:all: --dest "$lib_dir_msw_python_wheels_relevant" > /dev/null >&2
                
                #"$2"python -m pip download "$3" --platform win_amd64 --only-binary=:all: --dest "$lib_dir_msw_python_wheels_relevant" > /dev/null >&2
                #"$2"python -m pip download "$3" --platform win32 --only-binary=:all: --dest "$lib_dir_msw_python_wheels_relevant" > /dev/null >&2
                #"$2"python -m pip download "$3" --platform win_arm64 --only-binary=:all: --dest "$lib_dir_msw_python_wheels_relevant" > /dev/null >&2
            }

            for currentPackage in "${currentPackages_list[@]}"
            do
                _pip_download "$1" "$2" "$currentPackage"
            done
        fi
    fi


    if [[ "$lib_dir_msw_python_wheels_relevant" != "" ]]
    then
        _pip_install_nonet() {
            "$1"pip show "$3" > /dev/null 2>&1 && return 0
            #"$2"python -m pip show "$3" > /dev/null 2>&1 && return 0

            "$1"pip install --no-index --find-links="$lib_dir_msw_python_wheels_relevant" "$3" > /dev/null >&2
            #"$2"python -m pip install --no-index --find-links="$lib_dir_msw_python_wheels_relevant" "$3" > /dev/null >&2
        }
        for currentPackage in "${currentPackages_list[@]}"
        do
            _pip_install_nonet "$1" "$2" "$currentPackage"
        done
    fi
    
    if [[ "$nonet" != "true" ]] && [[ "$nonet_available" != "true" ]]
    then
        _pip_install() {
            "$1"pip show "$3" > /dev/null 2>&1 && return 0
            #"$2"python -m pip show "$3" > /dev/null 2>&1 && return 0

            "$1"pip install "$3" > /dev/null >&2
            #"$2"python -m pip install "$3" > /dev/null >&2
        }
        for currentPackage in "${currentPackages_list[@]}"
        do
            _pip_install "$1" "$2" "$currentPackage"
        done
    fi

    return 0
}
_install_dependencies_msw_python_sequence-specific() {
    _messageNormal '     install: dependencies: '"$1" > /dev/null >&2
    _start

    "$1"
    if [[ ! -e "$_PATH_pythonDir" ]]
    then
        ( _messagePlain_warn 'warn: skip: missing: python: '"$1" >&2 ) > /dev/null
        _stop 1
    fi
    
    _install_dependencies_msw_python_procedure-specific

    _stop
}
_install_dependencies_msw_python() {
    "$scriptAbsoluteLocation" _install_dependencies_msw_python_sequence-specific _set_msw_python_3_10
}




_prepare_msw_python_procedure() {
    local currentUID=$(_uid)

    if [[ ! -e "$_PATH_pythonDir"/python3 ]] && [[ $(find "$_PATH_pythonDir" -maxdepth 1 -iname 'python3' -type f -print -quit 2>/dev/null | tr -dc 'a-zA-Z0-9') == "" ]]
    then
        echo '#!/usr/bin/env bash
        python "$@"' > "$_PATH_pythonDir"/python3."$currentUID"
        chmod u+x "$_PATH_pythonDir"/python3."$currentUID"
        mv -f "$_PATH_pythonDir"/python3."$currentUID" "$_PATH_pythonDir"/python3
        chmod u+x "$_PATH_pythonDir"/python3
    fi
    

    mkdir -p "$scriptLocal"

    mkdir -p "$scriptLocal"/python_msw

    # In practice, 'pip' morsels may be all that is needed (ie. using 'pip' morsels for venv installation).
    mkdir -p "$scriptAbsoluteFolder"/_bundle/morsels
    mkdir -p "$scriptAbsoluteFolder"/_bundle/morsels/pip

    mkdir -p "$scriptAbsoluteFolder"/_bundle/morsels/venv
    mkdir -p "$scriptAbsoluteFolder"/_bundle/morsels/accelerate

    # STRONGLY DISCOURAGED!
    mkdir -p "$scriptAbsoluteFolder"/_bundle/morsels/conda

    if [[ ! -e "$scriptLocal"/python_msw/lean.py ]] || ! diff --unified=3 "$scriptAbsoluteFolder"/lean.py "$scriptLocal"/python_msw/lean.py > /dev/null
    then
        cp -f "$scriptAbsoluteFolder"/lean.py "$scriptLocal"/python_msw/lean.py."$currentUID" > /dev/null 2>&1
        mv -f "$scriptLocal"/python_msw/lean.py."$currentUID" "$scriptLocal"/python_msw/lean.py
        if [[ ! -e "$scriptLocal"/python_msw/lean.py ]]
        then
            cp -f "$scriptLib"/ubiquitous_bash/lean.py "$scriptLocal"/python_msw/lean.py."$currentUID"
            mv -f "$scriptLocal"/python_msw/lean.py."$currentUID" "$scriptLocal"/python_msw/lean.py
        fi
    fi
    [[ ! -e "$scriptLocal"/python_msw/lean.py ]] && ( _messagePlain_warn 'warn: missing: scriptLocal/python_msw/lean.py' >&2 ) > /dev/null


    _install_dependencies_msw_python_procedure-specific "" ""

    return 0
}




# UNIX/Linux of course has no need for such overrides, having normal Python installations in directories in PATH and no distinction between native/MSW and Cygwin/MSW binaries .
_override_msw_path_python_procedure() {
		local path_entry entry IFS=':'
		local new_path=""
		for entry in $PATH ; do
			# Skip adding if this entry matches current_binaries_path exactly
			[ "$entry" = "$current_binaries_path" ] && continue
			
			# Append current entry to the new_path
			if [ -z "$new_path" ]; then
				new_path="$entry"
			else
				new_path="${new_path}:${entry}"
			fi
		done

		# Finally, explicitly prepend the git path
		export PATH="${current_binaries_path}:${new_path}"

        [[ "$1" == "" ]] && export _PATH_pythonDir="$current_binaries_path"

        [[ "$1" != "" ]] && ( _messagePlain_probe_var PATH >&2 ) > /dev/null

        return 0
}
_detect_msw_path_python() {
        current_binaries_path="$1"

        ! [[ -d "$current_binaries_path" ]] && ( _messagePlain_warn 'warn: missing: python: '"$1" >&2 ) && return 1

        ( _messagePlain_good 'success: found: python: '"$1" >&2 ) > /dev/null
}
_detect_msw_path_python-localappdata() {
        current_binaries_path=$(cygpath -u "$LOCALAPPDATA")
        current_binaries_path="$current_binaries_path"/"$1"

        ! [[ -d "$current_binaries_path" ]] && ( _messagePlain_warn 'warn: missing: python: '"$1" >&2 ) && return 1

        ( _messagePlain_good 'success: found: python: '"$1" >&2 ) > /dev/null
}
_override_msw_path_python_3_10() {
    _messagePlain_nominal 'override: '${FUNCNAME[0]}

    local current_binaries_path=""

    # WARNING: Python 'embed' package may not be tested. Use the installer instead.

    _detect_msw_path_python "$scriptLib"/msw/python-3.10.11-embed-amd64
    [[ "$?" == "0" ]] && [[ -d "$current_binaries_path" ]] && _override_msw_path_python_procedure && return 0

    _detect_msw_path_python "$scriptLocal"/msw/python-3.10.11-embed-amd64
    [[ "$?" == "0" ]] && [[ -d "$current_binaries_path" ]] && _override_msw_path_python_procedure && return 0

    _detect_msw_path_python-localappdata "Programs/Python/python-3.10.11-embed-amd64"
    [[ "$?" == "0" ]] && [[ -d "$current_binaries_path" ]] && _override_msw_path_python_procedure && return 0

    _detect_msw_path_python-localappdata "Programs/Python/Python310"
    [[ "$?" == "0" ]] && [[ -d "$current_binaries_path" ]] && _override_msw_path_python_procedure && return 0


    ( _messagePlain_bad 'FAIL: missing: python: '${FUNCNAME[0]} >&2 ) > /dev/null
    ( _messagePlain_request 'request: install: https://www.python.org/ftp/python/3.10.11/python-3.10.11-amd64.exe' >&2 ) > /dev/null
    #( _messagePlain_request 'request: install: https://www.python.org/ftp/python/3.10.11/python-3.10.11-embed-amd64.zip' >&2 ) > /dev/null
    #( _messagePlain_request 'request: extract: '"$scriptLib"/msw/ >&2 ) > /dev/null
    #( _messagePlain_request 'request: extract: '"$scriptLocal"/msw/ >&2 ) > /dev/null
    #( _messagePlain_request 'request: extract: '"$LOCALAPPDATA"'Programs/Python' >&2 ) > /dev/null
    _messageFAIL >&2
}

# CAUTION: Called by _setupUbiquitous_accessories_here-python_hook .
_set_msw_python_procedure() {
    # WARNING: Invalid variables for 'python...embed' .
    export _pythonLib=$(find "$_PATH_pythonDir" -iname 'Lib' -type d -print -quit)
    export _pythonSitePackages=$(find "$_PATH_pythonDir" -iname 'site-packages' -type d -print -quit)
    export _pythonPip_file=$(find "$_PATH_pythonDir" -iname 'pip3.exe' -type f -print -quit)
    export _pythonPip=$([[ "$_pythonPip_file" != "" ]] && _getAbsoluteFolder "$_pythonPip_file")
    export _pythonPipInstaller_file=$(find "$_PATH_pythonDir" -iname 'get-pip.py' -type f -print -quit)

    # DUBIOUS
    export _transformersCache="$scriptLocal"/transformers-cache


    #export _python=$(find "$_PATH_pythonDir" -iname 'python.exe' -type f -print -quit)

    #export _accelerate=$(find "$_PATH_pythonDir" -iname 'accelerate.exe' -type f -print -quit)


    [[ ! -e "$_pythonLib" ]] && ( _messagePlain_bad 'bad: missing: $_pythonLib' >&2 ) > /dev/null && _messageFAIL >&2
    [[ ! -e "$_pythonSitePackages" ]] && ( _messagePlain_bad 'bad: missing: $_pythonSitePackages' >&2 ) > /dev/null && _messageFAIL >&2
    [[ ! -e "$_pythonPip_file" ]] && ( _messagePlain_bad 'bad: missing: $_pythonPip_file' >&2 ) > /dev/null && _messageFAIL >&2
    [[ ! -e "$_pythonPip" ]] && ( _messagePlain_bad 'bad: missing: $_pythonPip' >&2 ) > /dev/null && _messageFAIL >&2
    #[[ ! -e "$_pythonPipInstaller_file" ]] && ( _messagePlain_bad 'bad: missing: $_pythonPipInstaller_file' >&2 ) > /dev/null && _messageFAIL >&2

    local current_binaries_path
    current_binaries_path="$_PATH_pythonDir"
    _override_msw_path_python_procedure "_PATH_pythonDir"

    current_binaries_path="$_pythonPip"
    _override_msw_path_python_procedure "pip"

    local VIRTUAL_ENV_unix
    [[ "$VIRTUAL_ENV" != "" ]] && VIRTUAL_ENV_unix=$(cygpath -u "$VIRTUAL_ENV")
    VIRTUAL_ENV_unix="$VIRTUAL_ENV_unix"/Scripts
    if [[ -e "$VIRTUAL_ENV_unix" ]]
    then
        export _pythonLib=$(find "$VIRTUAL_ENV_unix"/.. -iname 'Lib' -type d -print -quit)
        export _pythonSitePackages=$(find "$VIRTUAL_ENV_unix"/.. -iname 'site-packages' -type d -print -quit)
        export _pythonPip_file=$(find "$VIRTUAL_ENV_unix" -iname 'pip3.exe' -type f -print -quit)
        export _pythonPip=$([[ "$_pythonPip_file" != "" ]] && _getAbsoluteFolder "$_pythonPip_file")
        export _pythonPipInstaller_file=$(find "$VIRTUAL_ENV_unix" -iname 'get-pip.py' -type f -print -quit)


        #export _python=$(find "$_PATH_pythonDir" -iname 'python.exe' -type f -print -quit)

        #export _accelerate=$(find "$_PATH_pythonDir" -iname 'accelerate.exe' -type f -print -quit)


        [[ ! -e "$_pythonLib" ]] && ( _messagePlain_bad 'bad: missing: $_pythonLib' >&2 ) > /dev/null && _messageFAIL >&2
        [[ ! -e "$_pythonSitePackages" ]] && ( _messagePlain_bad 'bad: missing: $_pythonSitePackages' >&2 ) > /dev/null && _messageFAIL >&2
        [[ ! -e "$_pythonPip_file" ]] && ( _messagePlain_bad 'bad: missing: $_pythonPip_file' >&2 ) > /dev/null && _messageFAIL >&2
        [[ ! -e "$_pythonPip" ]] && ( _messagePlain_bad 'bad: missing: $_pythonPip' >&2 ) > /dev/null && _messageFAIL >&2
        #[[ ! -e "$_pythonPipInstaller_file" ]] && ( _messagePlain_bad 'bad: missing: $_pythonPipInstaller_file' >&2 ) > /dev/null && _messageFAIL >&2


        current_binaries_path="$VIRTUAL_ENV_unix"
        _override_msw_path_python_procedure "VIRTUAL_ENV"

        current_binaries_path="$_pythonPip"
        _override_msw_path_python_procedure "VIRTUAL_ENV_pip"
    fi

    unset PYTHONHOME
    export PYTHONSTARTUP="$_PYTHONSTARTUP"
    
    return 0
}

_set_msw_python() {
    _set_msw_python_3_10 "$@"
}
_set_msw_python_3_10() {
    _override_msw_path_python_3_10 "$@"

    _set_msw_python_procedure "$@"
}



_demo_msw_python() {
    _messagePlain_nominal 'demo: '${FUNCNAME[0]} > /dev/null >&2
    sleep 0.6
    "$@"
    _bash
}
