
# Intended to designate a build (eg. of 'ubcp') as suitable for internal integration with a larger project (eg. 'ubdist') .
# If compatible or successful as documented (eg. specific features tested) or expected (ie. all essential features tested), the next step would be to tag as 'certified' with a date.


# ATTRIBUTION-AI - Largely attributable to ChatGPT GPT-4 2023-06-26 .
# 'Please provide code to run the git tag and git push commands in a Github Actions YML script using the privileges of secrets.GITHUB_TOKEN .'
# 'Will git automatically use the 'GITHUB_TOKEN' environment variable by default? Is this actually built into mainline versions of the git software?'
# 'Please provide a github actions YML script to copy a git release name to another name.'
# 'Google search seems to indicate 'gh' is already preinstalled with all github runners.'

name: _renameTag-build_to_internal

on:
  workflow_dispatch:
    #inputs:
      #source_tag:
        #description: 'Source Tag'
        #required: true
      #target_tag:
        #description: 'Target Tag'
        #required: true
        

jobs:
  copy-release:
    runs-on: ubuntu-latest
    steps:
      
      - uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
            tag_name: internal #(required) tag name to delete 
            github_token: ${{ secrets.GITHUB_TOKEN }}
            delete_release: true #(optional) default: true 

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
            tag_name: internal-${{ steps.date.outputs.date }} #(required) tag name to delete 
            github_token: ${{ secrets.GITHUB_TOKEN }}
            delete_release: true #(optional) default: true 



      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # we need fetch-depth: 0 to fetch all tags


      - name: Fetch release data
        id: fetch_release_data
        run: |
          RELEASE_DATA=$(gh release view build --json name,body -q '.name + "\n" + .body')
          echo "::set-output name=release_name::$(echo "$RELEASE_DATA" | head -n 1)"
          echo "::set-output name=release_body::$(echo "$RELEASE_DATA" | tail -n 1)"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}



      - name: Create new release
        run: |
          #gh release create ${{ github.event.inputs.target_tag }} --title "${{ steps.fetch_release_data.outputs.release_name }}" --notes "${{ steps.fetch_release_data.outputs.release_body }}"
          gh release create internal --title "internal" --notes "${{ steps.fetch_release_data.outputs.release_body }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}



      - name: Create new release
        run: |
          #gh release create ${{ github.event.inputs.target_tag }} --title "${{ steps.fetch_release_data.outputs.release_name }}" --notes "${{ steps.fetch_release_data.outputs.release_body }}"
          gh release create internal-$(date +%Y-%m-%d) --title "internal"-$(date +%Y-%m-%d) --notes "${{ steps.fetch_release_data.outputs.release_body }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}




