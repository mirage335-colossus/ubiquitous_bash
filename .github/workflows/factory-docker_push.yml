
name: factory-docker_push


# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
permissions:
  actions: write
  checks: read
  contents: write
  deployments: read
  issues: none
  #packages: read
  packages: write
  pull-requests: read
  repository-projects: read
  security-events: none
  statuses: read


on:
  workflow_dispatch:
    inputs:
      #devfast:
        #type: boolean
        #default: true
      #skimfast:
        #type: boolean
        #default: true
      runnerName:
        required: false
        default: ubuntu-latest-h
        type: choice
        options:
        #- ubuntu-22.04
        - ubuntu-latest-h
        - ubuntu-latest-l
        #- ubuntu-latest-m
        - ubuntu-latest
      buildToggle_runpod_pytorch_heavy:
        type: boolean
        default: true
      buildToggle_runpod_unsloth:
        type: boolean
        default: true
      buildToggle_axolotl_heavy:
        type: boolean
        default: true
      buildToggle_nvidia_nemo_heavy:
        type: boolean
        default: true
      buildToggle_runpod_heavy:
        type: boolean
        default: true
      buildToggle_openai_heavy:
        type: boolean
        default: true
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
  #schedule:
    ##- cron: '5 1 * * 6'
    ##- cron: '5 1 * * 2,4'
    ##- cron: '5 1 * * 2'
    #- cron: '5 1 * * 5'
    #- cron: '5 1 10 * *'

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  #group: ${{ github.workflow }}-${{ github.ref }}
  group: ${{ github.ref }}
  cancel-in-progress: true





# https://github.com/ncipollo/release-action
# https://github.com/softprops/action-gh-release
# https://svrooij.io/2021/08/17/github-actions-secret-file/
jobs:
  #build_guard:
    #runs-on: ubuntu-latest
    #steps:
      #- uses: actions/checkout@v3
      #- uses: dev-drprasad/delete-tag-and-release@v1.0
        #with:
            #tag_name: build-${{ github.run_id }}-${{ github.run_attempt }} #(required) tag name to delete 
            #github_token: ${{ secrets.GITHUB_TOKEN }}
            #delete_release: true #(optional) default: true
  build_runpod_pytorch_heavy:
    # WARNING: May be untested.
    #github.event.inputs.runnerName == 'ubuntu-latest-m' || 
    if: ${{ ( github.event.inputs.buildToggle_runpod_pytorch_heavy != 'false' ) && ( github.event.inputs.runnerName == 'ubuntu-latest-l' || github.event.inputs.runnerName == 'ubuntu-latest-h' ) }}
    #needs: [build_guard]
    runs-on: ${{ github.event.inputs.runnerName == '' && 'ubuntu-latest' || github.event.inputs.runnerName }}
    #runs-on: 'ubuntu-latest'
    steps:
      - name: users
        shell: bash
        run: |
          sudo -u ubuntu -n bash -c 'sudo -n useradd runner --non-unique -u $UID -g $UID' || true
          sudo -u ubuntu -n bash -c 'sudo -n groupadd runner --non-unique -g $UID' || true
          sudo -u runner -n bash -c 'sudo -n echo $USER $UID' || true
          true
      # https://github.com/easimon/maximize-build-space
      - name: Maximize build space
        if: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 37000
          #root-reserve-mb: 4125
          #root-reserve-mb: 1625
          temp-reserve-mb: 37000
          #temp-reserve-mb: 1950
          #temp-reserve-mb: 50
          swap-size-mb: 2
          #remove-dotnet: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-dotnet: 'true'
          #remove-android: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-android: 'true'
          #remove-haskell: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-haskell: 'true'
          #remove-codeql: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-codeql: 'true'
          #remove-docker-images: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-docker-images: 'true'
      - name: Maximize build space ! remove ONLY
        if: ${{ ( github.event.inputs.runnerName == 'ubuntu-latest-m' || github.event.inputs.runnerName == 'ubuntu-latest-l' || github.event.inputs.runnerName == 'ubuntu-latest-h' ) }}
        #if: false
        uses: AdityaGarg8/remove-unwanted-software@v4.1
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-cached-tools: 'true'
          remove-swapfile: 'true'
          verbose: 'false'
      - name: df
        shell: bash
        run: |
          df -h
          df -h /

      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: 'recursive'
      #- name: _getMinimal_cloud
        #shell: bash
        #timeout-minutes: 120
        #run: |
          #./ubiquitous_bash.sh _getMinimal_cloud
      - name: _getMinimal_cloud-special
        shell: bash
        timeout-minutes: 120
        run: |
          sudo -n apt-get update -y
          sudo -n apt-get -y install jq gh curl coreutils findutils tar gzip bzip2 sed axel aria2 rsync pv dos2unix xxd util-linux openssl
          ./ubiquitous_bash.sh _here_opensslConfig_legacy | sudo -n tee /etc/ssl/openssl_legacy.cnf > /dev/null 2>&1
          if ! sudo -n grep 'openssl_legacy' /etc/ssl/openssl.cnf > /dev/null 2>&1
          then
              sudo -n cp -f /etc/ssl/openssl.cnf /etc/ssl/openssl.cnf.orig
              echo '


              .include = /etc/ssl/openssl_legacy.cnf

              ' | sudo -n cat /etc/ssl/openssl.cnf.orig - | sudo -n tee /etc/ssl/openssl.cnf > /dev/null 2>&1
          fi
          true

      - name: factory! create
        shell: bash
        timeout-minutes: 120
        run: |
          export DOCKER_USER=${{ secrets.DOCKER_USERNAME }}
          ./ubiquitous_bash.sh __factoryCreate_runpod-pytorch-heavy
          ./ubiquitous_bash.sh _here_dockerfile_runpod-pytorch-heavy > Dockerfile
          docker tag runpod-pytorch-heavy ghcr.io/${{ github.repository_owner }}/runpod-pytorch-heavy:latest
          docker tag runpod-pytorch-heavy ghcr.io/${{ github.repository }}/runpod-pytorch-heavy:latest
          docker tag runpod-pytorch-heavy ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/runpod-pytorch-heavy:latest
          docker tag runpod-pytorch-heavy ${{ secrets.DOCKER_USERNAME }}/runpod-pytorch-heavy:latest

      - name: docker github push
        shell: bash
        timeout-minutes: 120
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker push ghcr.io/${{ github.repository_owner }}/runpod-pytorch-heavy:latest

      - name: docker docker push
        shell: bash
        timeout-minutes: 120
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/runpod-pytorch-heavy:latest




  build_runpod_unsloth:
    # WARNING: May be untested.
    #github.event.inputs.runnerName == 'ubuntu-latest-m' || 
    if: ${{ ( github.event.inputs.buildToggle_runpod_unsloth != 'false' ) && ( github.event.inputs.runnerName == 'ubuntu-latest-l' || github.event.inputs.runnerName == 'ubuntu-latest-h' ) }}
    #needs: [build_guard]
    runs-on: ${{ github.event.inputs.runnerName == '' && 'ubuntu-latest' || github.event.inputs.runnerName }}
    #runs-on: 'ubuntu-latest'
    steps:
      - name: users
        shell: bash
        run: |
          sudo -u ubuntu -n bash -c 'sudo -n useradd runner --non-unique -u $UID -g $UID' || true
          sudo -u ubuntu -n bash -c 'sudo -n groupadd runner --non-unique -g $UID' || true
          sudo -u runner -n bash -c 'sudo -n echo $USER $UID' || true
          true
      # https://github.com/easimon/maximize-build-space
      - name: Maximize build space
        if: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 37000
          #root-reserve-mb: 4125
          #root-reserve-mb: 1625
          temp-reserve-mb: 37000
          #temp-reserve-mb: 1950
          #temp-reserve-mb: 50
          swap-size-mb: 2
          #remove-dotnet: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-dotnet: 'true'
          #remove-android: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-android: 'true'
          #remove-haskell: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-haskell: 'true'
          #remove-codeql: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-codeql: 'true'
          #remove-docker-images: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-docker-images: 'true'
      - name: Maximize build space ! remove ONLY
        if: ${{ ( github.event.inputs.runnerName == 'ubuntu-latest-m' || github.event.inputs.runnerName == 'ubuntu-latest-l' || github.event.inputs.runnerName == 'ubuntu-latest-h' ) }}
        #if: false
        uses: AdityaGarg8/remove-unwanted-software@v4.1
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-cached-tools: 'true'
          remove-swapfile: 'true'
          verbose: 'false'
      - name: df
        shell: bash
        run: |
          df -h
          df -h /

      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: 'recursive'
      #- name: _getMinimal_cloud
        #shell: bash
        #timeout-minutes: 120
        #run: |
          #./ubiquitous_bash.sh _getMinimal_cloud
      - name: _getMinimal_cloud-special
        shell: bash
        timeout-minutes: 120
        run: |
          sudo -n apt-get update -y
          sudo -n apt-get -y install jq gh curl coreutils findutils tar gzip bzip2 sed axel aria2 rsync pv dos2unix xxd util-linux openssl
          ./ubiquitous_bash.sh _here_opensslConfig_legacy | sudo -n tee /etc/ssl/openssl_legacy.cnf > /dev/null 2>&1
          if ! sudo -n grep 'openssl_legacy' /etc/ssl/openssl.cnf > /dev/null 2>&1
          then
              sudo -n cp -f /etc/ssl/openssl.cnf /etc/ssl/openssl.cnf.orig
              echo '


              .include = /etc/ssl/openssl_legacy.cnf

              ' | sudo -n cat /etc/ssl/openssl.cnf.orig - | sudo -n tee /etc/ssl/openssl.cnf > /dev/null 2>&1
          fi
          true

      - name: factory! create
        shell: bash
        timeout-minutes: 120
        run: |
          export DOCKER_USER=${{ secrets.DOCKER_USERNAME }}
          ./ubiquitous_bash.sh __factoryCreate_runpod-pytorch-unsloth
          ./ubiquitous_bash.sh _here_dockerfile_runpod-pytorch-unsloth > Dockerfile
          docker tag runpod-pytorch-unsloth ghcr.io/${{ github.repository_owner }}/runpod-pytorch-unsloth:latest
          docker tag runpod-pytorch-unsloth ghcr.io/${{ github.repository }}/runpod-pytorch-unsloth:latest
          docker tag runpod-pytorch-unsloth ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/runpod-pytorch-unsloth:latest
          docker tag runpod-pytorch-unsloth ${{ secrets.DOCKER_USERNAME }}/runpod-pytorch-unsloth:latest

      - name: docker github push
        shell: bash
        timeout-minutes: 120
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker push ghcr.io/${{ github.repository_owner }}/runpod-pytorch-unsloth:latest

      - name: docker docker push
        shell: bash
        timeout-minutes: 120
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/runpod-pytorch-unsloth:latest





  build_axolotl_heavy:
    if: ${{ ( github.event.inputs.buildToggle_axolotl_heavy != 'false' ) && ( github.event.inputs.runnerName == 'ubuntu-latest-l' || github.event.inputs.runnerName == 'ubuntu-latest-h' ) }}
    #needs: [build_guard]
    runs-on: ${{ github.event.inputs.runnerName == '' && 'ubuntu-latest' || github.event.inputs.runnerName }}
    steps:
      - name: users
        shell: bash
        run: |
          sudo -u ubuntu -n bash -c 'sudo -n useradd runner --non-unique -u $UID -g $UID' || true
          sudo -u ubuntu -n bash -c 'sudo -n groupadd runner --non-unique -g $UID' || true
          sudo -u runner -n bash -c 'sudo -n echo $USER $UID' || true
          true
      # https://github.com/easimon/maximize-build-space
      - name: Maximize build space
        if: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 37000
          #root-reserve-mb: 4125
          #root-reserve-mb: 1625
          temp-reserve-mb: 37000
          #temp-reserve-mb: 1950
          #temp-reserve-mb: 50
          swap-size-mb: 2
          #remove-dotnet: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-dotnet: 'true'
          #remove-android: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-android: 'true'
          #remove-haskell: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-haskell: 'true'
          #remove-codeql: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-codeql: 'true'
          #remove-docker-images: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-docker-images: 'true'
      - name: Maximize build space ! remove ONLY
        if: ${{ ( github.event.inputs.runnerName == 'ubuntu-latest-m' || github.event.inputs.runnerName == 'ubuntu-latest-l' || github.event.inputs.runnerName == 'ubuntu-latest-h' ) }}
        uses: AdityaGarg8/remove-unwanted-software@v4.1
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-cached-tools: 'true'
          remove-swapfile: 'true'
          verbose: 'false'
      - name: df
        shell: bash
        run: |
          df -h
          df -h /

      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: 'recursive'
      #- name: _getMinimal_cloud
        #shell: bash
        #timeout-minutes: 120
        #run: |
          #./ubiquitous_bash.sh _getMinimal_cloud
      - name: _getMinimal_cloud-special
        shell: bash
        timeout-minutes: 120
        run: |
          sudo -n apt-get update -y
          sudo -n apt-get -y install jq gh curl coreutils findutils tar gzip bzip2 sed axel aria2 rsync pv dos2unix xxd util-linux openssl
          ./ubiquitous_bash.sh _here_opensslConfig_legacy | sudo -n tee /etc/ssl/openssl_legacy.cnf > /dev/null 2>&1
          if ! sudo -n grep 'openssl_legacy' /etc/ssl/openssl.cnf > /dev/null 2>&1
          then
              sudo -n cp -f /etc/ssl/openssl.cnf /etc/ssl/openssl.cnf.orig
              echo '


              .include = /etc/ssl/openssl_legacy.cnf

              ' | sudo -n cat /etc/ssl/openssl.cnf.orig - | sudo -n tee /etc/ssl/openssl.cnf > /dev/null 2>&1
          fi
          true

      - name: factory! create
        shell: bash
        timeout-minutes: 120
        run: |
          export DOCKER_USER=${{ secrets.DOCKER_USERNAME }}
          ./ubiquitous_bash.sh __factoryCreate_axolotl-heavy
          ./ubiquitous_bash.sh _here_dockerfile_axolotl-heavy > Dockerfile
          docker tag axolotl-heavy ghcr.io/${{ github.repository_owner }}/axolotl-heavy:latest
          docker tag axolotl-heavy ghcr.io/${{ github.repository }}/axolotl-heavy:latest
          docker tag axolotl-heavy ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/axolotl-heavy:latest
          docker tag axolotl-heavy ${{ secrets.DOCKER_USERNAME }}/axolotl-heavy:latest

      - name: docker github push
        shell: bash
        timeout-minutes: 120
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker push ghcr.io/${{ github.repository_owner }}/axolotl-heavy:latest

      - name: docker docker push
        shell: bash
        timeout-minutes: 120
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/axolotl-heavy:latest





  build_nvidia_nemo_heavy:
    if: ${{ ( github.event.inputs.buildToggle_nvidia_nemo_heavy != 'false' ) && ( github.event.inputs.runnerName == 'ubuntu-latest-l' || github.event.inputs.runnerName == 'ubuntu-latest-h' ) }}
    #needs: [build_guard]
    runs-on: ${{ github.event.inputs.runnerName == '' && 'ubuntu-latest' || github.event.inputs.runnerName }}
    steps:
      - name: users
        shell: bash
        run: |
          sudo -u ubuntu -n bash -c 'sudo -n useradd runner --non-unique -u $UID -g $UID' || true
          sudo -u ubuntu -n bash -c 'sudo -n groupadd runner --non-unique -g $UID' || true
          sudo -u runner -n bash -c 'sudo -n echo $USER $UID' || true
          true
      # https://github.com/easimon/maximize-build-space
      - name: Maximize build space
        if: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 37000
          #root-reserve-mb: 4125
          #root-reserve-mb: 1625
          temp-reserve-mb: 37000
          #temp-reserve-mb: 1950
          #temp-reserve-mb: 50
          swap-size-mb: 2
          #remove-dotnet: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-dotnet: 'true'
          #remove-android: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-android: 'true'
          #remove-haskell: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-haskell: 'true'
          #remove-codeql: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-codeql: 'true'
          #remove-docker-images: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-docker-images: 'true'
      - name: Maximize build space ! remove ONLY
        if: ${{ ( github.event.inputs.runnerName == 'ubuntu-latest-m' || github.event.inputs.runnerName == 'ubuntu-latest-l' || github.event.inputs.runnerName == 'ubuntu-latest-h' ) }}
        uses: AdityaGarg8/remove-unwanted-software@v4.1
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-cached-tools: 'true'
          remove-swapfile: 'true'
          verbose: 'false'
      - name: df
        shell: bash
        run: |
          df -h
          df -h /

      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: 'recursive'
      #- name: _getMinimal_cloud
        #shell: bash
        #timeout-minutes: 120
        #run: |
          #./ubiquitous_bash.sh _getMinimal_cloud
      - name: _getMinimal_cloud-special
        shell: bash
        timeout-minutes: 120
        run: |
          sudo -n apt-get update -y
          sudo -n apt-get -y install jq gh curl coreutils findutils tar gzip bzip2 sed axel aria2 rsync pv dos2unix xxd util-linux openssl
          ./ubiquitous_bash.sh _here_opensslConfig_legacy | sudo -n tee /etc/ssl/openssl_legacy.cnf > /dev/null 2>&1
          if ! sudo -n grep 'openssl_legacy' /etc/ssl/openssl.cnf > /dev/null 2>&1
          then
              sudo -n cp -f /etc/ssl/openssl.cnf /etc/ssl/openssl.cnf.orig
              echo '


              .include = /etc/ssl/openssl_legacy.cnf

              ' | sudo -n cat /etc/ssl/openssl.cnf.orig - | sudo -n tee /etc/ssl/openssl.cnf > /dev/null 2>&1
          fi
          true

      - name: factory! create
        shell: bash
        timeout-minutes: 120
        run: |
          export DOCKER_USER=${{ secrets.DOCKER_USERNAME }}
          ./ubiquitous_bash.sh __factoryCreate_nvidia_nemo-heavy
          ./ubiquitous_bash.sh _here_dockerfile_nvidia_nemo-heavy > Dockerfile
          docker tag nvidia_nemo-heavy ghcr.io/${{ github.repository_owner }}/nvidia_nemo-heavy:latest
          docker tag nvidia_nemo-heavy ghcr.io/${{ github.repository }}/nvidia_nemo-heavy:latest
          docker tag nvidia_nemo-heavy ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/nvidia_nemo-heavy:latest
          docker tag nvidia_nemo-heavy ${{ secrets.DOCKER_USERNAME }}/nvidia_nemo-heavy:latest

      - name: docker github push
        shell: bash
        timeout-minutes: 120
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker push ghcr.io/${{ github.repository_owner }}/nvidia_nemo-heavy:latest

      - name: docker docker push
        shell: bash
        timeout-minutes: 120
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/nvidia_nemo-heavy:latest





  build_runpod_heavy:
    if: ${{ ( github.event.inputs.buildToggle_runpod_heavy != 'false' ) }}
    #needs: [build_guard]
    #runs-on: ${{ github.event.inputs.runnerName == '' && 'ubuntu-latest' || github.event.inputs.runnerName }}
    runs-on: 'ubuntu-latest'
    steps:
      - name: users
        shell: bash
        run: |
          sudo -u ubuntu -n bash -c 'sudo -n useradd runner --non-unique -u $UID -g $UID' || true
          sudo -u ubuntu -n bash -c 'sudo -n groupadd runner --non-unique -g $UID' || true
          sudo -u runner -n bash -c 'sudo -n echo $USER $UID' || true
          true
      # https://github.com/easimon/maximize-build-space
      - name: Maximize build space
        #if: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 37000
          #root-reserve-mb: 4125
          #root-reserve-mb: 1625
          temp-reserve-mb: 37000
          #temp-reserve-mb: 1950
          #temp-reserve-mb: 50
          swap-size-mb: 2
          #remove-dotnet: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-dotnet: 'true'
          #remove-android: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-android: 'true'
          #remove-haskell: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-haskell: 'true'
          #remove-codeql: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-codeql: 'true'
          #remove-docker-images: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-docker-images: 'true'
      - name: Maximize build space ! remove ONLY
        #if: ${{ ( github.event.inputs.runnerName == 'ubuntu-latest-m' || github.event.inputs.runnerName == 'ubuntu-latest-l' || github.event.inputs.runnerName == 'ubuntu-latest-h' ) }}
        if: false
        uses: AdityaGarg8/remove-unwanted-software@v4.1
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-cached-tools: 'true'
          remove-swapfile: 'true'
          verbose: 'false'
      - name: df
        shell: bash
        run: |
          df -h
          df -h /

      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: 'recursive'
      #- name: _getMinimal_cloud
        #shell: bash
        #timeout-minutes: 120
        #run: |
          #./ubiquitous_bash.sh _getMinimal_cloud
      - name: _getMinimal_cloud-special
        shell: bash
        timeout-minutes: 120
        run: |
          sudo -n apt-get update -y
          sudo -n apt-get -y install jq gh curl coreutils findutils tar gzip bzip2 sed axel aria2 rsync pv dos2unix xxd util-linux openssl
          ./ubiquitous_bash.sh _here_opensslConfig_legacy | sudo -n tee /etc/ssl/openssl_legacy.cnf > /dev/null 2>&1
          if ! sudo -n grep 'openssl_legacy' /etc/ssl/openssl.cnf > /dev/null 2>&1
          then
              sudo -n cp -f /etc/ssl/openssl.cnf /etc/ssl/openssl.cnf.orig
              echo '


              .include = /etc/ssl/openssl_legacy.cnf

              ' | sudo -n cat /etc/ssl/openssl.cnf.orig - | sudo -n tee /etc/ssl/openssl.cnf > /dev/null 2>&1
          fi
          true

      - name: factory! create
        shell: bash
        timeout-minutes: 120
        run: |
          export DOCKER_USER=${{ secrets.DOCKER_USERNAME }}
          ./ubiquitous_bash.sh __factoryCreate_runpod-heavy
          ./ubiquitous_bash.sh _here_dockerfile_runpod-heavy > Dockerfile
          docker tag runpod-heavy ghcr.io/${{ github.repository_owner }}/runpod-heavy:latest
          docker tag runpod-heavy ghcr.io/${{ github.repository }}/runpod-heavy:latest
          docker tag runpod-heavy ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/runpod-heavy:latest
          docker tag runpod-heavy ${{ secrets.DOCKER_USERNAME }}/runpod-heavy:latest

      - name: docker github push
        shell: bash
        timeout-minutes: 120
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker push ghcr.io/${{ github.repository_owner }}/runpod-heavy:latest

      - name: docker docker push
        shell: bash
        timeout-minutes: 120
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/runpod-heavy:latest







  build_openai_heavy:
    if: ${{ ( github.event.inputs.buildToggle_openai_heavy != 'false' ) }}
    #needs: [build_guard]
    #runs-on: ${{ github.event.inputs.runnerName == '' && 'ubuntu-latest' || github.event.inputs.runnerName }}
    runs-on: 'ubuntu-latest'
    steps:
      - name: users
        shell: bash
        run: |
          sudo -u ubuntu -n bash -c 'sudo -n useradd runner --non-unique -u $UID -g $UID' || true
          sudo -u ubuntu -n bash -c 'sudo -n groupadd runner --non-unique -g $UID' || true
          sudo -u runner -n bash -c 'sudo -n echo $USER $UID' || true
          true
      # https://github.com/easimon/maximize-build-space
      - name: Maximize build space
        #if: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 37000
          #root-reserve-mb: 4125
          #root-reserve-mb: 1625
          temp-reserve-mb: 37000
          #temp-reserve-mb: 1950
          #temp-reserve-mb: 50
          swap-size-mb: 2
          #remove-dotnet: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-dotnet: 'true'
          #remove-android: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-android: 'true'
          #remove-haskell: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-haskell: 'true'
          #remove-codeql: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-codeql: 'true'
          #remove-docker-images: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' && github.event.inputs.runnerName != 'ubuntu-latest-l' && github.event.inputs.runnerName != 'ubuntu-latest-h' }}
          remove-docker-images: 'true'
      - name: Maximize build space ! remove ONLY
        #if: ${{ ( github.event.inputs.runnerName == 'ubuntu-latest-m' || github.event.inputs.runnerName == 'ubuntu-latest-l' || github.event.inputs.runnerName == 'ubuntu-latest-h' ) }}
        if: false
        uses: AdityaGarg8/remove-unwanted-software@v4.1
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-cached-tools: 'true'
          remove-swapfile: 'true'
          verbose: 'false'
      - name: df
        shell: bash
        run: |
          df -h
          df -h /

      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: 'recursive'
      #- name: _getMinimal_cloud
        #shell: bash
        #timeout-minutes: 120
        #run: |
          #./ubiquitous_bash.sh _getMinimal_cloud
      - name: _getMinimal_cloud-special
        shell: bash
        timeout-minutes: 120
        run: |
          sudo -n apt-get update -y
          sudo -n apt-get -y install jq gh curl coreutils findutils tar gzip bzip2 sed axel aria2 rsync pv dos2unix xxd util-linux openssl
          ./ubiquitous_bash.sh _here_opensslConfig_legacy | sudo -n tee /etc/ssl/openssl_legacy.cnf > /dev/null 2>&1
          if ! sudo -n grep 'openssl_legacy' /etc/ssl/openssl.cnf > /dev/null 2>&1
          then
              sudo -n cp -f /etc/ssl/openssl.cnf /etc/ssl/openssl.cnf.orig
              echo '


              .include = /etc/ssl/openssl_legacy.cnf

              ' | sudo -n cat /etc/ssl/openssl.cnf.orig - | sudo -n tee /etc/ssl/openssl.cnf > /dev/null 2>&1
          fi
          true

      - name: _true
        shell: bash
        timeout-minutes: 120
        run: |
          ./ubiquitous_bash.sh _true
          ./_true | sudo -n tee ./_local/_true.log && exit ${PIPESTATUS[0]}
      - name: _false
        shell: bash
        timeout-minutes: 120
        run: |
          ! ./ubiquitous_bash.sh _false
          ( ! ./_false ) | sudo -n tee ./_local/_false.log && exit ${PIPESTATUS[0]}
      - name: ___factoryTest
        shell: bash
        timeout-minutes: 120
        run: |
          ./ubiquitous_bash.sh ___factoryTest_direct

      - name: factory! create
        shell: bash
        timeout-minutes: 120
        run: |
          export DOCKER_USER=${{ secrets.DOCKER_USERNAME }}
          ./ubiquitous_bash.sh __factoryCreate_openai-heavy
          ./ubiquitous_bash.sh _here_dockerfile_openai-heavy > Dockerfile
          docker tag openai-heavy ghcr.io/${{ github.repository_owner }}/openai-heavy:latest
          docker tag openai-heavy ghcr.io/${{ github.repository }}/openai-heavy:latest
          docker tag openai-heavy ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/openai-heavy:latest
          docker tag openai-heavy ${{ secrets.DOCKER_USERNAME }}/openai-heavy:latest

      - name: docker github push
        shell: bash
        timeout-minutes: 120
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker push ghcr.io/${{ github.repository_owner }}/openai-heavy:latest

      - name: docker docker push
        shell: bash
        timeout-minutes: 120
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/openai-heavy:latest




