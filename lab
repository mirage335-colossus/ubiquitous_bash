#!/usr/bin/env bash

#Universal debugging filesystem.
_user_log_template() {
	# DANGER Do NOT create automatically, or reference any existing directory!
	! [[ -d "$HOME"/.ubcore/userlog ]] && cat - > /dev/null 2>&1 return 1
	
	#Terminal session may be used - the sessionid may be set through .bashrc/.ubcorerc .
	if [[ "$sessionid" != "" ]]
	then
		cat - >> "$HOME"/.ubcore/userlog/t-"$sessionid".log
		return
	fi
	cat - >> "$HOME"/.ubcore/userlog/t-undef.log
}

#Cyan. Harmless status messages.
_messagePlain_nominal() {
	echo -e -n '\E[0;36m '
	echo -n "$@"
	echo -e -n ' \E[0m'
	echo
	return 0
}

#Blue. Diagnostic instrumentation.
_messagePlain_probe() {
	echo -e -n '\E[0;34m '
	echo -n "$@"
	echo -e -n ' \E[0m'
	echo
	return 0
}

#Green. Working as expected.
_messagePlain_good() {
	echo -e -n '\E[0;32m '
	echo -n "$@"
	echo -e -n ' \E[0m'
	echo
	return 0
}

#Yellow. May or may not be a problem.
_messagePlain_warn() {
	echo -e -n '\E[1;33m '
	echo -n "$@"
	echo -e -n ' \E[0m'
	echo
	return 0
}

#Red. Will result in missing functionality, reduced performance, etc, but not necessarily program failure overall.
_messagePlain_bad() {
	echo -e -n '\E[0;31m '
	echo -n "$@"
	echo -e -n ' \E[0m'
	echo
	return 0
}

#Demarcate major steps.
_messageNormal() {
	echo -e -n '\E[1;32;46m '
	echo -n "$@"
	echo -e -n ' \E[0m'
	echo
	return 0
}

#Demarcate major failures.
_messageError() {
	echo -e -n '\E[1;33;41m '
	echo -n "$@"
	echo -e -n ' \E[0m'
	echo
	return 0
}

#Creates derivative project importing ubiquitous_bash as a static library.
#"$1" == "$projectName"
#"$2" == "$projectFolder" (optional, default: ./"$projectName" )
#"$devName" == Developer name (optional, copyright, default: anonymous).
_project() {
	_messagePlain_nominal "PROJECT: ""$1"
	_messagePlain_probe "FORK: Ubiquitous Bash: ""$2"
	
	workingDir="$PWD"
	
	[[ "$devName" == "" ]] && devName=anonymous
	
	[[ "$1" != "" ]] && projectName="$1"
	
	projectFolder=./"$projectName"
	[[ "$2" != "" ]] && projectFolder="$2"/"$projectName"
	#[[ "$projectFolder" == './' ]] && projectFolder="$2"
	

	#All content in this folder not owned by other authors is intended to be public domain. Other copyright notices may be provided as templates. See license.txt for details.

	mkdir -p "$projectFolder"
	cd "$projectFolder"

	mkdir ./_lib
	mkdir ./_prog

	git init

	git submodule add --depth 1 git@github.com:mirage335/ubiquitous_bash.git ./_lib/ubiquitous_bash

	#Parent derivative of ubiquitous_bash.
	#cd ./_lib/parent
	#git submodule update --depth 1 --init ./_lib/ubiquitous_bash
	#cd "$projectFolder"

	#git submodule update --depth 1 --init --recursive

	cp ./_lib/ubiquitous_bash/ubiquitous_bash.sh ./
	cp ./_lib/ubiquitous_bash/compile.sh ./
	cp ./_lib/ubiquitous_bash/license.txt.gpl ./license.txt
	cp ./_lib/ubiquitous_bash/README.md.template ./README.md

	find . -maxdepth 1 -type f -exec sed -i s/Project/"$projectName"/g {} \;
	find . -maxdepth 1 -type f -exec sed -i s/DeveloperName/"$devName"/g {} \;
	find . -maxdepth 1 -type f -exec sed -i s/YEAR/$(date +%Y)/g {} \;

	##### Binary Executables
	mkdir -p ./_bin
	cp -a ./_lib/ubiquitous_bash/_bin/. ./_bin
	mkdir -p ./_lib
	#cp -a ./_lib/ubiquitous_bash/_lib/. ./_lib
	mkdir -p ./_bundle
	cp -a ./_lib/ubiquitous_bash/_bundle/. ./_bundle

	##### Hardcoded Configuration
	mkdir -p ./_config
	cp -a ./_lib/ubiquitous_bash/_config/. ./_config

	##### Commonly customized scripts.

	#cp ./_lib/ubiquitous_bash/generic/process/daemon.sh

	#cp ./_lib/ubiquitous_bash/structure/localfs.sh ./_prog/

	#cp ./_lib/ubiquitous_bash/structure/localenv.sh ./_prog/

	#cp ./_lib/ubiquitous_bash/structure/installation.sh ./_prog/

	##### Parent Derivative Scripts
	#mkdir -p ./_prog
	#cp -a ./_lib/parent/_prog/. ./_prog

	##### Dedicated program scripts.

	echo -n >> ./_prog/specglobalvars.sh

	echo '##### Core' >> ./_prog/core.sh
	echo '' >> ./_prog/core.sh
	
	echo > ./_prog/installation_prog.sh

	cp ./_lib/ubiquitous_bash/structure/program.sh ./_prog/

	cp ./_lib/ubiquitous_bash/build/bash/compile_bash_prog.sh ./_prog/
	cp ./_lib/ubiquitous_bash/build/bash/generate_bash_prog.sh ./_prog/

	cp ./_lib/ubiquitous_bash/os/override/override_prog.sh ./_prog/

	##### Runtime Configuration

	#mkdir -p ./_local/ssh
	#cp -d --preserve=all ./_lib/ubiquitous_bash/_lib/ssh/ops ./_local/ssh/ops

	#Parent derivative of ubiquitous_bash.
	#cp -d --preserve=all ./_lib/parent/_lib/ubiquitous_bash/_lib/ssh/ops ./_local/ssh/ops

	#cp -a ./_lib/coreautossh/_local ./
	
	
	mkdir -p ./_local
	echo '#Enable search if "vm.img" and related files are missing.' >> ./_local/ops
	echo 'export ubVirtImageLocal="false"' >> ./_local/ops
	
	./compile.sh

	git add -A .
	git commit -a -m "first commit"
	
	cd "$workingDir"
}

#Generic Apps/VMs/etc treated as infrastructure outright, typically nixexevm/winexevm .
_infrastructure_list() {
	_messageNormal "LIST: INFRASTRUCTURE"
	
	local currentProject
	
	for currentProject in "${infrastructures[@]}"
	do
		_project "$currentProject" "$1"/core/infrastructure
	done
}

_vm_list() {
	_messageNormal "LIST: VM"
	
	local currentProject
	
	for currentProject in "${virtualmachines[@]}"
	do
		_project "$currentProject" "$1"/core/infrastructure/vm
	done
}

_app_list() {
	_messageNormal "LIST: APP"
	
	local currentProject
	
	for currentProject in "${applications[@]}"
	do
		_project "$currentProject" "$1"/core/installations
	done
}

_lab_basicFS() {
	_messageNormal "LABFS: ""$1"
	
	local currentProject
	
	mkdir -p "$1"/_index
	mkdir -p "$1"/_local/_index
	
	mkdir -p "$1"/core/lab
	mkdir -p "$1"/core/installations
	mkdir -p "$1"/core/infrastructure/vm
	
	for currentProject in "${infrastructures[@]}"
	do
		mkdir -p "$1"/core/infrastructure/"$currentProject"
	done
	
	for currentProject in "${virtualmachines[@]}"
	do
		mkdir -p "$1"/core/infrastructure/vm/"$currentProject"
	done
	
	for currentProject in "${applications[@]}"
	do
		mkdir -p "$1"/core/installations/"$currentProject"
	done
}

_lab_accessories() {
	_messageNormal "ACCESSORIES: ""$1"
	git clone --depth 1 git@github.com:mirage335/ubiquitous_bash.git "$1"/core/infrastructure/ubiquitous_bash
	
	cp "$1"/core/infrastructure/ubiquitous_bash/_anchor "$1"/_index/
	cp "$1"/core/infrastructure/ubiquitous_bash/_anchor "$1"/_local/_index
}

_labLinking() {
	_messageNormal "LINKING: ""$1"
	_messagePlain_probe "SOURCE (FULL): ""$1"
	_messagePlain_probe "DESTINATION (MINI): ""$2"
	
	rm -f "$1"/_local/_index/_anchor > /dev/null 2>&1
	rmdir "$1"/_local/_index > /dev/null 2>&1
	rmdir "$1"/_local > /dev/null 2>&1
	rmdir "$1"/_ref > /dev/null 2>&1
	rmdir "$1"/records > /dev/null 2>&1
	
	mkdir -p "$1"/"$2"/_local/_index
	mkdir -p "$1"/"$2"/_ref
	mkdir -p "$1"/"$2"/records
	
	ln -s "$2"/_local "$1"/_local
	ln -s "$2"/_ref "$1"/_ref
	ln -s "$2"/records "$1"/records
	
	rm -f "$1"/_index/update.sh > /dev/null 2>&1
	echo 'cp ./_* '../_local/_index/ >> "$1"/_index/update.sh
	echo 'cp ./_* '../"$2"/_index/ >> "$1"/_index/update.sh
	echo 'cp ./_* '../"$2"/_local/_index/ >> "$1"/_index/update.sh
}


_lab() {
	labDir="$1"
	[[ "$labDir" == "" ]] && labDir=./"$labName"
	
	_lab_basicFS "$labDir"
	
	_lab_accessories "$labDir"
	
	_infrastructure_list "$labDir"
	_vm_list "$labDir"
	_app_list "$labDir"
}

export devName="devName"
export labName="labName"
export labNameMini="$labName"Mini


virtualmachines+=("$labName"First-vm)
virtualmachines+=("$labName"Second-vm)

#Without VM images of their own, these will eventually point to the user's installed VM at "$HOME"/core/infrastructure/<nixexevm|winexevm> .
infrastructures+=(nixexevm)
infrastructures+=(winexevm)

applications+=("$labName"First-app)
applications+=("$labName"Second-app)

_lab ./"$labName"/core/lab/"$labNameMini"
_lab ./"$labName"

_labLinking ./"$labName" ./core/lab/"$labNameMini"



