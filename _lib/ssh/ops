#netName=""

#Daemon commands. Do not define unless multi-gateway
#redundancy is needed. Tor services redundancy is
#expected to be far more reliable than such fallbacks.
_ssh_autoreverse() {
	_torServer_SSH
	_autossh

	#_autossh firstGateway
	#_autossh secondGateway
}

#Hooks "_setup_ssh" after other operations complete. Typically
#used to install special files (eg. machine specific keys).
_setup_ssh_extra() {
	true
}

##Hooks "_setup" before "_setup_ssh" .
_setup_pre() {
	true
}

##Hooks "_setup" after "_setup_ssh" .
_setup_prog() {
	true
}


# WARNING Must use unique netName!
export netName='default'

export sshHomeBase="$HOME"/.ssh

_here_ssh_config() {
	cat << CZXWXcRMTo8EmM8i4d

Host *-$netName*
	Compression yes
	ExitOnForwardFailure yes
	ConnectTimeout 36
	ConnectionAttempts 3
	ServerAliveInterval 6
	ServerAliveCountMax 18
	#PubkeyAuthentication yes
	#PasswordAuthentication no
	StrictHostKeyChecking no
	UserKnownHostsFile "$sshLocalSSH/known_hosts"
	IdentityFile "$sshLocalSSH/id_rsa"
	#Cipher aes256-gcm@openssh.com
	#Ciphers aes256-gcm@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,chacha20-poly1305@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour

Host gw-$netName
	ProxyCommand "$sshDir/cautossh" _ssh_proxy_server-$netName
	User gateway
	#IdentityFile "$sshLocalSSH/id_rsa"

Host server-$netName
	ProxyCommand "$sshDir/cautossh" _ssh_proxy_server-$netName
	User user
	#IdentityFile "$sshLocalSSH/id_rsa"

Host hostnameA-$netName
	ProxyCommand "$sshDir/cautossh" _ssh_proxy_hostnameA-$netName
	User user
	#IdentityFile "$sshLocalSSH/id_rsa"

Host hostnameC-$netName
	ProxyCommand "$sshDir/cautossh" _ssh_proxy_hostnameC-$netName
	User user
	#IdentityFile "$sshLocalSSH/id_rsa"

CZXWXcRMTo8EmM8i4d
}

_check_LAN_default() {
	ip addr show | grep '192\.168\.x' > /dev/null 2>&1 && return 0
	return 1
}

_ssh_proxy_server-default() {
	_start

	_proxy x.x.x.x 22

	_proxy server.domain.tld 22


	_stop
}

_ssh_proxy_hostnameA-default() {
	_start

	_proxy hostnameA.domain.tld 20001

	_proxy hostnameA.domain.tld 22

	_check_LAN_default && _proxy 192.168.x.x 22
	_proxySSH_reverse hostnameA gw-default

	if [[ "$proxySSH_loopGuard" != "true" ]]
	then
		export proxySSH_loopGuard="true"
		_proxySSH hostnameC-default 22 192.168.xxx.xxx
	fi

	_proxyTor_reverse hostnameA xxxxxxxxxxxxxxxxx.onion


	_stop
}

_ssh_proxy_hostnameC-default() {
	_start

	_proxy hostnameC.domain.tld 20002

	_proxy hostnameC.domain.tld 22

	_check_LAN_default && _proxy 192.168.x.x 22
	_proxySSH_reverse hostnameC gw-default

	if [[ "$proxySSH_loopGuard" != "true" ]]
	then
		export proxySSH_loopGuard="true"
		_proxySSH hostnameA-default 22 192.168.xxx.xxx
	fi

	_proxyTor_reverse hostnameC xxxxxxxxxxxxxxxxx.onion


	_stop
}
