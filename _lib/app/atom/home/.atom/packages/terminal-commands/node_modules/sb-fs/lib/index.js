'use strict';

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _sbPromisify = require('sb-promisify');

var _sbPromisify2 = _interopRequireDefault(_sbPromisify);

var _stripBomBuf = require('strip-bom-buf');

var _stripBomBuf2 = _interopRequireDefault(_stripBomBuf);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var promisifiedFS = {};

var syncMethods = ['Stats', '_toUnixTimestamp', 'watch', 'watchFile', 'unwatchFile', 'createReadStream', 'ReadStream', 'FileReadStream', 'createWriteStream', 'WriteStream', 'FileWriteStream'];

for (var key in _fs2.default) {
  if (!{}.hasOwnProperty.call(_fs2.default, key)) {
    continue;
  }
  var value = _fs2.default[key];
  if (typeof value === 'function' && key.indexOf('Sync') === -1 && syncMethods.indexOf(key) === -1) {
    promisifiedFS[key] = (0, _sbPromisify2.default)(value);
  } else {
    promisifiedFS[key] = value;
  }
}

promisifiedFS.exists = function (path) {
  return new Promise(function (resolve) {
    _fs2.default.access(path, _fs2.default.R_OK, function (error) {
      resolve(error === null);
    });
  });
};
promisifiedFS.readFile = function (path, encoding) {
  return new Promise(function (resolve, reject) {
    _fs2.default.readFile(path, function (error, buffer) {
      if (error) {
        reject(error);
        return;
      }
      var contents = (0, _stripBomBuf2.default)(buffer);
      if (encoding) {
        contents = contents.toString(encoding);
      }
      resolve(contents);
    });
  });
};

module.exports = promisifiedFS;