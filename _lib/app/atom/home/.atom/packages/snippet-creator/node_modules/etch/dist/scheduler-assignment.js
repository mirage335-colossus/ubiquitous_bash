// This file implements getter and setter functions for a scheduler to be used
// by this library when updating the DOM. The scheduler's job is to ensure that
// DOM interaction is performed efficiently. When using `etch` in Atom, you
// should tell `etch` to use Atom's scheduler by calling
// `setScheduler(atom.views)`.
//
// Schedulers should support the following interface:
// * `updateDocument(fn)` This method is asynchronous. It enqueues functions to
// be executed later.
// * `getNextUpdatePromise()` This function should return a promise that
// resolves after all pending document update functions have been invoked.
//
// Schedulers could support the following optional methods, which are supported
// by Atom's scheduler.
//
// * `readDocument` This method can be invoked by clients other than `etch` when
// it is necessary to read from the DOM. Functions enqueued via this method
// should not be run until all document update functions have been executed.
// Batching updates and reads in this way will prevent forced synchronous
// reflows.
// * `pollDocument` This method is similar to `readDocument`, but it runs the
// associated functions repeatedly. Again, they should be scheduled in such a
// way so as to avoid synchronous reflows.

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.setScheduler = setScheduler;
exports.getScheduler = getScheduler;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _defaultScheduler = require('./default-scheduler');

var _defaultScheduler2 = _interopRequireDefault(_defaultScheduler);

var scheduler = null;

function setScheduler(customScheduler) {
  scheduler = customScheduler;
}

function getScheduler() {
  if (!scheduler) {
    scheduler = new _defaultScheduler2['default']();
  }
  return scheduler;
}