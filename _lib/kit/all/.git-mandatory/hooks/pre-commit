#!/usr/bin/env bash
[[ "$PATH" != *"/usr/local/bin"* ]] && [[ -e "/usr/local/bin" ]] && export PATH=/usr/local/bin:"$PATH"
[[ "$PATH" != *"/usr/bin"* ]] && [[ -e "/usr/bin" ]] && export PATH=/usr/bin:"$PATH"
[[ "$PATH" != *"/bin:"* ]] && [[ -e "/bin" ]] && export PATH=/bin:"$PATH"
#_compressedScript_uk4uPhB663kVcygT0q_compressedScript_uk4uPhB663kVcygT0q_compressedScript_uk4uPhB663kVcygT0q_compressedScript
export ub_setScriptChecksum_disable="true"
current_internal_CompressedScript_bytes='16981'
current_internal_CompressedScript_cksum='1802210942'
current_internal_CompressedScript='
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
22tnWrHEZ/sCAAAAAARZWg=='
current_internal_compressedScript_headerFunctions='
/Td6WFoAAATm1rRGAgAhARwAAAAQz1jM4CsHA1pdAC+ciKYksL89qRi90TdMvSwSEM6J8ipM2rR/Iqc/oYbShD5P+hKgz3ONSu7BhrUf8OSN4oZ8BL1e7m0JQ33pEQs007VTHA7nLczyIuWiilZSo+0zB132
DrV189uAlZ6oqD3MK7bjrSmuGreEaBOC+z5QkGUPIDVaXfJmDg73/A1Y9JqRKxtli7ZDurfX2t/Z3m6RV6ku3LwPHl2qt8/kbWEubRkY3Fl2VTTFWjQ8Z9qfpBK4YyV7fw3X3hcUmN6Fz+u2P8eCSl/fCnNX
HtvGeiwoJbZ3wje2iPvqVhHoy0BMVkEDcSqWo+znkV0BwqE45qLsZQ9IGG1CzglgciwcOU2fdsqKBFC5XA3WYFGg6uZ2q4mvn5jWR+FbeUz7YjupLAvLl7DE+daOBWzzyYeFrcMhDk1QeqOKpv41V0GTTqAm
Z7lRbPrhk3oRY/kBiQGZSfRuxTSmIc1zevrFy6JWcZkCJayU/wQ+XEKdvF51XHH+OYrSuhIxvk6G+Ce0sbTr3GBfVRQYdRpxeOs48xNaEfmBf6GZcWUMx5L3LA4cup19vL4O75JjKbnlJeYdoRCjtcPE7A8S
82KbKVXWm5n1ADflKsnTX3CVTSu7uS4pVXHlludUnC/0dCPIaO2WxpZTXETnBW0SD0f3HTs7UDEzwk7eMHnoe3xk/cdsh16yyG0jPOBLHEqULsotf/cimpgvkZlFxPNFKvrB2sVBDpjr393u8l5sSqQ9L5Vr
QgGi6nBnxhDESgC1fQ6p4D6w2joYaBQzVX0ShFGEK+bvZ6VjUbYJlLF4gx2eezXDlEClVs6t/VpATWVe263gsdVgRirp4aPGEtCnMOl6oAU3laA3KDdlQbcC906c44adhj8dQ6w5GG1zEy5jv73Q/CBnpuh4
6Q2uqurIYFG/4bzAesrLfJaMbHC5QEx2yRFLlLaXzwYBqGzW1kQN1LZUOdFDF746w4C4eMXwHmuiAdpwV2muM75Gv4UeLCX8pXZlUOuUnruNLaDG9Tq1m+cWA1lXHyWJ4wB4kyv4KtgYXHsQL1t6bC8gD9ly
TvtNA8FiEDaU4PeofKVcYpu+2JSbjM6pr/bbQKOmEr2szDpnOSz/0dZivx9HodtgWaii7I0ZRCSi9eNbuNfa+H7BpKNBHwAAADfa2eLaotFaAAH2BohWAACvFwLPscRn+wIAAAAABFla'
! echo "$current_internal_compressedScript_headerFunctions" | base64 -d | xz -d > /dev/null && exit 1
	source <(echo "$current_internal_compressedScript_headerFunctions" | base64 -d | xz -d)
export importScriptLocation=$(_getScriptAbsoluteLocation)
export importScriptFolder=$(_getScriptAbsoluteFolder)
! type readlink > /dev/null 2>&1 && exit 1;
! type dirname > /dev/null 2>&1 && exit 1;
! type basename > /dev/null 2>&1 && exit 1;
! readlink -f . > /dev/null 2>&1 && exit 1;
[[ "$1" == "--profile" ]] && ( [[ rotten == "rotten"* ]] || [[ rotten == "rotten" ]] ) && export ub_import="true" && export importScriptLocation="$profileScriptLocation" && export importScriptFolder="$profileScriptFolder"
[[ "$importScriptLocation" == "" ]] && exit 1
[[ "$importScriptFolder" == "" ]] && exit 1
! _getAbsolute_criticalDep && exit 1
! _compressed_criticalDep && exit 1
! echo "$current_internal_CompressedScript" | base64 -d | xz -d > /dev/null && exit 1
if [[ "$1" == "--embed" ]]
then
	source <(echo "$current_internal_CompressedScript" | base64 -d | xz -d) "$@"
	internalFunctionExitStatus="$?"
	return "$internalFunctionExitStatus" > /dev/null 2>&1
	exit "$internalFunctionExitStatus"
elif [[ "$1" == "--profile" ]] || [[ "$1" == "--parent" ]]
then
	source <(echo "$current_internal_CompressedScript" | base64 -d | xz -d) "$@"
else
	source <(echo "$current_internal_CompressedScript" | base64 -d | xz -d) --compressed "$@"
	ub_import=
	ub_import_param=
	ub_import_script=
	ub_loginshell=
fi
if [[ "$ub_import" == "true" ]] && ! ( [[ "$ub_import_param" == "--bypass" ]] ) || [[ "$ub_import_param" == "--compressed" ]] || [[ "$ub_import_param" == "--parent" ]] || [[ "$ub_import_param" == "--profile" ]]
then
	if [[ "$ubiquitousBashID" != "" ]] || [[ -e "$HOME"/.ubcore ]] || ( [[ rotten != "rotten"* ]] || [[ rotten != "rotten" ]] )
	then
		return 0 > /dev/null 2>&1
		exit 0
	fi
fi
unset current_internal_CompressedScript ; unset current_internal_CompressedScript_cksum ; unset current_internal_CompressedScript_bytes
export ub_setScriptChecksum_disable=
unset ub_setScriptChecksum_disable
true
# https://github.com/mirage335/ubiquitous_bash
#_compressedScript_uk4uPhB663kVcygT0q_compressedScript_uk4uPhB663kVcygT0q_compressedScript_uk4uPhB663kVcygT0q_compressedScript






#####Entry
# ###


_pre-gitHook() {
	[[ ! -e "$scriptAbsoluteFolder"/../../.git ]] && exit 1
	[[ ! -e "$scriptAbsoluteFolder"/../hooks ]] && exit 1
	#[[ ! -e "$scriptAbsoluteFolder"/../../.git-mandatory ]] && exit 1
}

_rezip-gitHook() {
	# DANGER: Do NOT call '_start' or '_stop'.
	##_start
	##_start scriptLocal_mkdir_disable
	
	if [[ $(zipinfo "$1" | tail -c6 | tr -dc '.%0-9') != "0.0%" ]]
	then
		_messagePlain_nominal '_rezip-gitHook: '"$1"
		
		local current_name
		#current_name=$(basename "$1")
		#current_name="${current_name%.*}"
		#current_name=$(cat /dev/urandom 2> /dev/null | tr -dc 'a-zA-Z0-9' 2> /dev/null | head -c "18" 2> /dev/null)
		current_name=$(current_chars=abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ ; for (( currentIteration=1; currentIteration<=18; currentIteration++ )) ; do echo -n "${current_chars:RANDOM%${#current_chars}:1}" ; done )
		
		mkdir "$safeTmp"/"$current_name"
		cd "$safeTmp"/"$current_name"

		# ATTRIBUTION: Github Copilot 2024-03-20
		if uname -a | grep -i cygwin > /dev/null 2>&1
		then
			_messagePlain_probe '_rezip-gitHook: Cygwin: decompress_recompress.py'
			python3 "$scriptAbsoluteFolder"/decompress_recompress.py "$1" "$safeTmp"/"$current_name"/tmp.zip
			rm -f "$1"
			mv -f "$safeTmp"/"$current_name"/tmp.zip "$1"
		else
			_messagePlain_probe '_rezip-gitHook: unzip/zip'

			#if uname -a | grep -i cygwin > /dev/null 2>&1 && type -p 7z > /dev/null 2>&1
			#then
				# ATTRIBUTION: Github Copilot 2024-03-20
				#7z e -y "$1" > /dev/null
			#else
				unzip -q "$1"
			#fi
			#cd ..

			#if uname -a | grep -i cygwin > /dev/null 2>&1
			#then
				#chmod -R ug+w .
			#fi

			rm -f "$1"

			#if uname -a | grep -i cygwin > /dev/null 2>&1 && type -p 7z > /dev/null 2>&1
			#then
				# ATTRIBUTION: Github Copilot 2024-03-20
				#7z a -tzip -mx=0 "$1" . > /dev/null
			#else
				#zip -0 -r "$1" "$current_name"
				zip -q -0 -r "$1" .
			#fi
		fi

		cd "$safeTmp"

		_safeRMR "$safeTmp"/"$current_name"


		#local current_out_dir
		#current_out_dir=$(_getAbsoluteFolder "$1")

		#local current_git_dir
		#current_git_dir=$(cd "$current_out_dir" && git rev-parse --git-dir)

		#local currentDelay
		#local currentDelayTenths
		#let currentDelay="$RANDOM"%5
		#let currentDelay="$currentDelay+5"
		#let currentDelayTenths="$RANDOM"%10
		##echo "$currentDelay"."$currentDelayTenths"
		##sleep "$currentDelay"."$currentDelayTenths"

		#local currentIteration
		#currentIteration=0
		#local currentIteration_inner
		#currentIteration_inner=0
		#unset currentExitStatus
		#if [[ -e "$current_out_dir" ]] && [[ -d "$current_out_dir" ]] && cd "$current_out_dir"
		#then
			#while ( [[ -f "$current_git_dir"/hooks/pre-commit.lock ]] || ! ( echo > "$current_git_dir"/hooks/pre-commit.lock ; git add -u "$1" ; currentExitStatus="$?" ; rm -f "$current_git_dir"/hooks/pre-commit.lock ; [[ "$currentExitStatus" == "0" ]] ) ) && [[ "$currentIteration" -lt 25 ]]
			#do
				#sleep "$currentDelay"."$currentDelayTenths"
				#while [[ -f "$current_git_dir"/hooks/pre-commit.lock ]] && [[ "$currentIteration_inner" -lt 60 ]]
				#do
					#sleep 0.3
					#let currentIteration_inner="$currentIteration_inner+1"
				#done
				#let currentIteration="$currentIteration+1"
			#done
		#fi

		echo > "$1".gitAdd.bak
	fi
	
	# DANGER: Do NOT call '_start' or '_stop'.
	##_stop
}
_rezip-gitHook_parallel() {
	# DANGER: Do NOT call '_start' or '_stop'.
	#export safeTmp="$current_safe_safeTmp"
	#export sessionid="$current_safe_sessionid"
	export safeToDeleteGit="true"
	
	
	local functionEntryPWD
	functionEntryPWD="$PWD"
	
	local currentArg
	for currentArg in "$@"
	do
		true
		
		cd "$functionEntryPWD"
		
		_rezip-gitHook "$currentArg"
		
		# WARNING: May be untested.
		#_rezip-gitHook "$currentArg" &
		
		#/bin/echo "$currentArg" > /dev/tty
	done

	wait >&2
}

_gitAdd-gitHook() {
	#_messagePlain_nominal '_gitAdd-gitHook: '"$1"
	
	local functionEntryPWD
	functionEntryPWD="$PWD"

	rm -f "$1"

	local current_file
	current_file="${1%.gitAdd.bak}"
	current_file=$(_getAbsoluteLocation "$current_file")
	_messagePlain_nominal '_gitAdd-gitHook: '"$current_file"

	
	local current_out_dir
	current_out_dir=$(_getAbsoluteFolder "$1")

	local currentExitStatus

	if [[ -e "$current_out_dir" ]] && [[ -d "$current_out_dir" ]] && cd "$current_out_dir" && [[ -e "$current_file" ]]
	then
		local currentIteration
		
		currentIteration="1"
		while [[ ! -f "$current_file" ]] && [[ $currentIteration -le 3 ]]
        do
            _messagePlain_warn 'warn: file may not yet be regular'
			_messagePlain_probe 'wait: '"$currentIteration"
			sleep 1
            ((currentIteration++))
        done
		[[ ! -f "$current_file" ]] && _messagePlain_bad '! [[ -f "$current_file" ]]'

		## Check if the file is locked
		#currentIteration="1"
		#while [[ $(fuser "$current_file" 2>/dev/null | wc -w) -gt 0 ]] && [[ $currentIteration -le 3 ]]
		#do
			#_messagePlain_warn 'warn: file is locked'
			#_messagePlain_probe 'wait: '"$currentIteration"
			#sleep 1
			#((currentIteration++))
		#done
		#[[ $(fuser "$current_file" 2>/dev/null | wc -w) -gt 0 ]] && _messagePlain_bad '! [[ $(fuser "$current_file" 2>/dev/null | wc -w) -gt 0 ]]'


		currentIteration="1"
		while [[ $(zipinfo "$current_file" | tail -c6 | tr -dc '.%0-9') != "0.0%" ]] && [[ $currentIteration -le 3 ]]
		do
            _messagePlain_warn 'warn: file may not yet be decompressed'
			_messagePlain_probe 'wait: '"$currentIteration"
			sleep 1
            ((currentIteration++))
		done
		[[ $(zipinfo "$current_file" | tail -c6 | tr -dc '.%0-9') != "0.0%" ]] && _messagePlain_bad '! [[ $(zipinfo "$current_file" | tail -c6 | tr -dc '.%0-9') != "0.0%" ]]'

		
		_messagePlain_probe_cmd git add -u "$current_file"
		currentExitStatus="$?"

		#_messagePlain_probe_cmd git add "$current_file"
		#[[ "$?" != "0" ]] && currentExitStatus=1

		if [[ "$currentExitStatus" == "0" ]]
		then
			rm -f "$1"
			#currentExitStatus="$?"
		fi
	else
		currentExitStatus=1
		! [[ -e "$current_out_dir" ]] && _messagePlain_bad '! [[ -e "$current_out_dir" ]]'
		! [[ -d "$current_out_dir" ]] && _messagePlain_bad '! [[ -d "$current_out_dir" ]]'
		! cd "$current_out_dir" && _messagePlain_bad '! cd "$current_out_dir"'
		! [[ -e "$current_file" ]] && _messagePlain_bad '! [[ -e "$current_file" ]]'
	fi

	cd "$functionEntryPWD"
	return "$currentExitStatus"
}
_gitAdd-gitHook_parallel() {
	local functionEntryPWD
	functionEntryPWD="$PWD"
	
	local currentArg
	for currentArg in "$@"
	do
		true
		
		cd "$functionEntryPWD"
		
		_gitAdd-gitHook "$currentArg"
		
		# WARNING: May be untested.
		#_gitAdd-gitHook "$currentArg" &
		
		#/bin/echo "$currentArg" > /dev/tty
	done

	wait >&2
}

_pre-commit_sequence() {
	local functionEntryPWD
	functionEntryPWD="$PWD"

	#_pre-gitHook
	
	#_start
	_start scriptLocal_mkdir_disable
	
	
	#[[ $(git config --type=bool hooks.disableDecompress | tr -dc 'a-z') == "true" ]]
	
	
	local current_location
	current_location=$(_getAbsoluteLocation "$1")
	
	
	export -f "_getAbsolute_criticalDep"
	export -f "_failExec"
	export -f "_safeRMR"

	export -f "_safeEcho"
	export -f "_safeEcho_newline"
	
	export -f "_messagePlain_nominal"
	export -f "_color_begin_nominal"
	export -f "_color_end"
	export -f "_getAbsoluteFolder"
	export -f "_getAbsoluteLocation"
	export -f "_realpath_L_s"
	export -f "_realpath_L"
	export -f "_compat_realpath_run"
	export -f "_compat_realpath"
	export -f "_messagePlain_probe_var"
	export -f "_color_begin_probe"
	export -f "_messagePlain_probe"
	export -f "_messagePlain_probe_cmd"

	export -f _color_begin_warn
	export -f _color_begin_bad
	export -f "_messagePlain_warn"
	export -f "_messagePlain_bad"
	
	export -f "_rezip-gitHook"
	export -f "_rezip-gitHook_parallel"

	export -f _gitAdd-gitHook
	export -f _gitAdd-gitHook_parallel
	
	#export current_safe_safeTmp="$safeTmp"
	#export current_safe_sessionid="$sessionid"
	find "$current_location" -type f \( -iname '*.FCStd' -o -iname '*.FCSTD' -o -iname '*.fcstd' -o -iname '*.odt' -o -iname '*.docx' \) -not -iname '~$*' -not -path '\.\/\.git*' -print0 | xargs -0 -x -s 4096 -L 6 -P $(nproc) bash -c '_rezip-gitHook_parallel "$@"' _
	#-exec "$scriptAbsoluteLocation" _rezip-gitHook {} \;
	wait "$!" >&2
	wait >&2

	#if uname -a | grep -i cygwin > /dev/null 2>&1 && find "$current_location" -type f -iname '*.gitAdd.bak' -not -iname '~$*' -not -path '\.\/\.git*' | grep '.gitAdd.bak' > /dev/null
	#then
		#_messagePlain_nominal 'git add -u'
		#cd "$current_location"
		#_messagePlain_probe_cmd git add -u
	#fi

	find "$current_location" -type f -iname '*.gitAdd.bak' -not -iname '~$*' -not -path '\.\/\.git*' -print0 | xargs -0 -x -s 4096 -L 6 -P 1 bash -c '_gitAdd-gitHook_parallel "$@"' _
	wait "$!" >&2
	wait >&2

	# WARNING: Any output from this command indicates an issue .
	find "$current_location" -type f -iname '*.gitAdd.bak' -not -iname '~$*' -not -path '\.\/\.git*'
	wait >&2
	

	cd "$functionEntryPWD"
	_stop
}
_pre-commit() {
	_pre-gitHook
	"$scriptAbsoluteLocation" _pre-commit_sequence "$scriptAbsoluteFolder"/../.. "$@"
}
pre-commit() {
	_pre-commit
}





_setup_prog() {
	[[ ! -e "$scriptAbsoluteFolder"/../.git ]] && exit 1
	[[ ! -e "$scriptAbsoluteFolder"/../.git-mandatory ]] && exit 1
	
	cp -a "$scriptAbsoluteLocation" "$scriptAbsoluteFolder"/../.git/hooks
	
	
	
	
}


_enter() {
	local currentFunction
	
	# | tr -dc 'a-zA-Z0-9_-'
	currentFunction=$(basename "$scriptAbsoluteLocation")
	
	[[ "$currentFunction" == "pre-commit" ]] && _pre-commit
}











_test_prog() {
	true
}
_main() {
	#_start
	#_start scriptLocal_mkdir_disable
	
	#_collect
	
	_enter "$@"
	
	#_stop
}
if [[ "$1" == '_test' ]]
then
	current_deleteScriptLocal="false"
	[[ ! -e "$scriptLocal" ]] && current_deleteScriptLocal="true"
	_stop_prog() {
		[[ "$current_deleteScriptLocal" == "true" ]] && rmdir "$scriptLocal" > /dev/null 2>&1
	}
fi
if [[ "$1" == '_'* ]] && type "$1" > /dev/null 2>&1
then
	"$@"
	internalFunctionExitStatus="$?"
	return "$internalFunctionExitStatus" > /dev/null 2>&1
	exit "$internalFunctionExitStatus"
fi
if [[ "$1" != '_'* ]]
then
	_main "$@"
fi

